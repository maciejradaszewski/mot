// ============================================================================
//
// Copyright (c) 2006-2013, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package mot2.usersync_0_2;

import routines.Mathematical;
import routines.DataOperation;
import routines.Relational;
import routines.TalendDate;
import routines.TalendDataGenerator;
import routines.Numeric;
import routines.TalendString;
import routines.StringHandling;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;

@SuppressWarnings("unused")
/**
 * Job: userSync Purpose: <br>
 * Description:  <br>
 * @author test@talend.com
 * @version 5.5.1.r118616
 * @status 
 */
public class userSync implements TalendJob {

	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}

	private final static String defaultCharset = java.nio.charset.Charset
			.defaultCharset().name();

	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();

	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties) {
			super(properties);
		}

		public ContextProperties() {
			super();
		}

		public void synchronizeContext() {

			if (databaseHost != null) {

				this.setProperty("databaseHost", databaseHost.toString());

			}

			if (databaseName != null) {

				this.setProperty("databaseName", databaseName.toString());

			}

			if (databasePassword != null) {

				this.setProperty("databasePassword",
						databasePassword.toString());

			}

			if (databasePort != null) {

				this.setProperty("databasePort", databasePort.toString());

			}

			if (databaseUserName != null) {

				this.setProperty("databaseUserName",
						databaseUserName.toString());

			}

			if (defaultPassword != null) {

				this.setProperty("defaultPassword", defaultPassword.toString());

			}

			if (ldapBaseDN != null) {

				this.setProperty("ldapBaseDN", ldapBaseDN.toString());

			}

			if (ldapHost != null) {

				this.setProperty("ldapHost", ldapHost.toString());

			}

			if (ldapOU != null) {

				this.setProperty("ldapOU", ldapOU.toString());

			}

			if (ldapPassword != null) {

				this.setProperty("ldapPassword", ldapPassword.toString());

			}

			if (ldapPort != null) {

				this.setProperty("ldapPort", ldapPort.toString());

			}

		}

		public String databaseHost;

		public String getDatabaseHost() {
			return this.databaseHost;
		}

		public String databaseName;

		public String getDatabaseName() {
			return this.databaseName;
		}

		public String databasePassword;

		public String getDatabasePassword() {
			return this.databasePassword;
		}

		public Integer databasePort;

		public Integer getDatabasePort() {
			return this.databasePort;
		}

		public String databaseUserName;

		public String getDatabaseUserName() {
			return this.databaseUserName;
		}

		public String defaultPassword;

		public String getDefaultPassword() {
			return this.defaultPassword;
		}

		public String ldapBaseDN;

		public String getLdapBaseDN() {
			return this.ldapBaseDN;
		}

		public String ldapHost;

		public String getLdapHost() {
			return this.ldapHost;
		}

		public String ldapOU;

		public String getLdapOU() {
			return this.ldapOU;
		}

		public String ldapPassword;

		public String getLdapPassword() {
			return this.ldapPassword;
		}

		public String ldapPort;

		public String getLdapPort() {
			return this.ldapPort;
		}
	}

	private ContextProperties context = new ContextProperties();

	public ContextProperties getContext() {
		return this.context;
	}

	private final String jobVersion = "0.2";
	private final String jobName = "userSync";
	private final String projectName = "MOT2";
	public Integer errorCode = null;
	private String currentComponent = "";

	private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();

	private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
	private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
	public final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();

	public boolean isExportedAsOSGI = false;

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(
			java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources
				.entrySet()) {
			talendDataSources.put(
					dataSourceEntry.getKey(),
					new routines.system.TalendDataSource(dataSourceEntry
							.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

	private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
	private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(
			new java.io.BufferedOutputStream(baos));

	public String getExceptionStackTrace() {
		if ("failure".equals(this.getStatus())) {
			errorMessagePS.flush();
			return baos.toString();
		}
		return null;
	}

	private java.lang.Exception exception = null;

	public java.lang.Exception getException() {
		if ("failure".equals(this.getStatus())) {
			return this.exception;
		}
		return null;
	}

	private class TalendException extends java.lang.Exception {

		private static final long serialVersionUID = 1L;

		private java.util.Map<String, Object> globalMap = null;
		private java.lang.Exception e = null;
		private String currentComponent = null;
		private String virtualComponentName = null;

		public void setVirtualComponentName(String virtualComponentName) {
			this.virtualComponentName = virtualComponentName;
		}

		private TalendException(java.lang.Exception e, String errorComponent,
				final java.util.Map<String, Object> globalMap) {
			this.currentComponent = errorComponent;
			this.globalMap = globalMap;
			this.e = e;
		}

		public java.lang.Exception getException() {
			return this.e;
		}

		public String getCurrentComponent() {
			return this.currentComponent;
		}

		public String getExceptionCauseMessage(java.lang.Exception e) {
			Throwable cause = e;
			String message = null;
			int i = 10;
			while (null != cause && 0 < i--) {
				message = cause.getMessage();
				if (null == message) {
					cause = cause.getCause();
				} else {
					break;
				}
			}
			if (null == message) {
				message = e.getClass().getName();
			}
			return message;
		}

		@Override
		public void printStackTrace() {
			if (!(e instanceof TalendException || e instanceof TDieException)) {
				if (virtualComponentName != null
						&& currentComponent.indexOf(virtualComponentName + "_") == 0) {
					globalMap.put(virtualComponentName + "_ERROR_MESSAGE",
							getExceptionCauseMessage(e));
				}
				globalMap.put(currentComponent + "_ERROR_MESSAGE",
						getExceptionCauseMessage(e));
				System.err
						.println("Exception in component " + currentComponent);
			}
			if (!(e instanceof TDieException)) {
				if (e instanceof TalendException) {
					e.printStackTrace();
				} else {
					e.printStackTrace();
					e.printStackTrace(errorMessagePS);
					userSync.this.exception = e;
				}
			}
			if (!(e instanceof TalendException)) {
				try {
					for (java.lang.reflect.Method m : this.getClass()
							.getEnclosingClass().getMethods()) {
						if (m.getName().compareTo(currentComponent + "_error") == 0) {
							m.invoke(userSync.this, new Object[] { e,
									currentComponent, globalMap });
							break;
						}
					}

					if (!(e instanceof TDieException)) {
						tLogCatcher_1.addMessage("Java Exception",
								currentComponent, 6, e.getClass().getName()
										+ ":" + e.getMessage(), 1);
						tLogCatcher_1Process(globalMap);
					}
				} catch (java.lang.SecurityException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalArgumentException e) {
					this.e.printStackTrace();
				} catch (java.lang.IllegalAccessException e) {
					this.e.printStackTrace();
				} catch (java.lang.reflect.InvocationTargetException e) {
					this.e.printStackTrace();
				} catch (TalendException e) {
					// do nothing
				}

			}
		}
	}

	public void tLogCatcher_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogRow_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMysqlInput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMap_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLDAPOutput_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			errorCode = null;
			tMsgBox_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tMsgBox_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		try {

			errorCode = null;
			tDie_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}

		} catch (java.lang.Exception e) {
			e.printStackTrace();
		}

		tMsgBox_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tDie_1_error(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		end_Hash.put(errorComponent, System.currentTimeMillis());

		status = "failure";

		tDie_1_onSubJobError(exception, errorComponent, globalMap);
	}

	public void tLogCatcher_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMysqlInput_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tMsgBox_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public void tDie_1_onSubJobError(java.lang.Exception exception,
			String errorComponent, final java.util.Map<String, Object> globalMap)
			throws TalendException {

		resumeUtil.addLog("SYSTEM_LOG", "NODE:" + errorComponent, "", Thread
				.currentThread().getId() + "", "FATAL", "",
				exception.getMessage(),
				ResumeUtil.getExceptionStackTrace(exception), "");

	}

	public static class row2Struct implements
			routines.system.IPersistableRow<row2Struct> {
		final static byte[] commonByteArrayLock_MOT2_userSync = new byte[0];
		static byte[] commonByteArray_MOT2_userSync = new byte[0];

		public java.util.Date moment;

		public java.util.Date getMoment() {
			return this.moment;
		}

		public String pid;

		public String getPid() {
			return this.pid;
		}

		public String root_pid;

		public String getRoot_pid() {
			return this.root_pid;
		}

		public String father_pid;

		public String getFather_pid() {
			return this.father_pid;
		}

		public String project;

		public String getProject() {
			return this.project;
		}

		public String job;

		public String getJob() {
			return this.job;
		}

		public String context;

		public String getContext() {
			return this.context;
		}

		public Integer priority;

		public Integer getPriority() {
			return this.priority;
		}

		public String type;

		public String getType() {
			return this.type;
		}

		public String origin;

		public String getOrigin() {
			return this.origin;
		}

		public String message;

		public String getMessage() {
			return this.message;
		}

		public Integer code;

		public Integer getCode() {
			return this.code;
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MOT2_userSync.length) {
					if (length < 1024
							&& commonByteArray_MOT2_userSync.length == 0) {
						commonByteArray_MOT2_userSync = new byte[1024];
					} else {
						commonByteArray_MOT2_userSync = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MOT2_userSync, 0, length);
				strReturn = new String(commonByteArray_MOT2_userSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MOT2_userSync) {

				try {

					int length = 0;

					this.moment = readDate(dis);

					this.pid = readString(dis);

					this.root_pid = readString(dis);

					this.father_pid = readString(dis);

					this.project = readString(dis);

					this.job = readString(dis);

					this.context = readString(dis);

					this.priority = readInteger(dis);

					this.type = readString(dis);

					this.origin = readString(dis);

					this.message = readString(dis);

					this.code = readInteger(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// java.util.Date

				writeDate(this.moment, dos);

				// String

				writeString(this.pid, dos);

				// String

				writeString(this.root_pid, dos);

				// String

				writeString(this.father_pid, dos);

				// String

				writeString(this.project, dos);

				// String

				writeString(this.job, dos);

				// String

				writeString(this.context, dos);

				// Integer

				writeInteger(this.priority, dos);

				// String

				writeString(this.type, dos);

				// String

				writeString(this.origin, dos);

				// String

				writeString(this.message, dos);

				// Integer

				writeInteger(this.code, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("moment=" + String.valueOf(moment));
			sb.append(",pid=" + pid);
			sb.append(",root_pid=" + root_pid);
			sb.append(",father_pid=" + father_pid);
			sb.append(",project=" + project);
			sb.append(",job=" + job);
			sb.append(",context=" + context);
			sb.append(",priority=" + String.valueOf(priority));
			sb.append(",type=" + type);
			sb.append(",origin=" + origin);
			sb.append(",message=" + message);
			sb.append(",code=" + String.valueOf(code));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row2Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tLogCatcher_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row2Struct row2 = new row2Struct();

				/**
				 * [tLogRow_1 begin ] start
				 */

				ok_Hash.put("tLogRow_1", false);
				start_Hash.put("tLogRow_1", System.currentTimeMillis());

				currentComponent = "tLogRow_1";

				int tos_count_tLogRow_1 = 0;

				// /////////////////////

				class Util_tLogRow_1 {

					String[] des_top = { ".", ".", "-", "+" };

					String[] des_head = { "|=", "=|", "-", "+" };

					String[] des_bottom = { "'", "'", "-", "+" };

					String name = "";

					java.util.List<String[]> list = new java.util.ArrayList<String[]>();

					int[] colLengths = new int[12];

					public void addRow(String[] row) {

						for (int i = 0; i < 12; i++) {
							if (row[i] != null) {
								colLengths[i] = Math.max(colLengths[i],
										row[i].length());
							}
						}
						list.add(row);
					}

					public void setTableName(String name) {

						this.name = name;
					}

					public StringBuilder format() {

						StringBuilder sb = new StringBuilder();

						sb.append(print(des_top));

						int totals = 0;
						for (int i = 0; i < colLengths.length; i++) {
							totals = totals + colLengths[i];
						}

						// name
						sb.append("|");
						int k = 0;
						for (k = 0; k < (totals + 11 - name.length()) / 2; k++) {
							sb.append(' ');
						}
						sb.append(name);
						for (int i = 0; i < totals + 11 - name.length() - k; i++) {
							sb.append(' ');
						}
						sb.append("|\n");

						// head and rows
						sb.append(print(des_head));
						for (int i = 0; i < list.size(); i++) {

							String[] row = list.get(i);

							java.util.Formatter formatter = new java.util.Formatter(
									new StringBuilder());

							StringBuilder sbformat = new StringBuilder();
							sbformat.append("|%1$-");
							sbformat.append(colLengths[0]);
							sbformat.append("s");

							sbformat.append("|%2$-");
							sbformat.append(colLengths[1]);
							sbformat.append("s");

							sbformat.append("|%3$-");
							sbformat.append(colLengths[2]);
							sbformat.append("s");

							sbformat.append("|%4$-");
							sbformat.append(colLengths[3]);
							sbformat.append("s");

							sbformat.append("|%5$-");
							sbformat.append(colLengths[4]);
							sbformat.append("s");

							sbformat.append("|%6$-");
							sbformat.append(colLengths[5]);
							sbformat.append("s");

							sbformat.append("|%7$-");
							sbformat.append(colLengths[6]);
							sbformat.append("s");

							sbformat.append("|%8$-");
							sbformat.append(colLengths[7]);
							sbformat.append("s");

							sbformat.append("|%9$-");
							sbformat.append(colLengths[8]);
							sbformat.append("s");

							sbformat.append("|%10$-");
							sbformat.append(colLengths[9]);
							sbformat.append("s");

							sbformat.append("|%11$-");
							sbformat.append(colLengths[10]);
							sbformat.append("s");

							sbformat.append("|%12$-");
							sbformat.append(colLengths[11]);
							sbformat.append("s");

							sbformat.append("|\n");

							formatter.format(sbformat.toString(),
									(Object[]) row);

							sb.append(formatter.toString());
							if (i == 0)
								sb.append(print(des_head)); // print the head
						}

						// end
						sb.append(print(des_bottom));
						return sb;
					}

					private StringBuilder print(String[] fillChars) {
						StringBuilder sb = new StringBuilder();
						// first column
						sb.append(fillChars[0]);
						for (int i = 0; i < colLengths[0]
								- fillChars[0].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						for (int i = 0; i < colLengths[1]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[2]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[3]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[4]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[5]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[6]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[7]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[8]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[9]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);
						for (int i = 0; i < colLengths[10]
								- fillChars[3].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[3]);

						// last column
						for (int i = 0; i < colLengths[11]
								- fillChars[1].length() + 1; i++) {
							sb.append(fillChars[2]);
						}
						sb.append(fillChars[1]);
						sb.append("\n");
						return sb;
					}
				}
				Util_tLogRow_1 util_tLogRow_1 = new Util_tLogRow_1();
				util_tLogRow_1.setTableName("tLogRow_1");
				util_tLogRow_1.addRow(new String[] { "moment", "pid",
						"root_pid", "father_pid", "project", "job", "context",
						"priority", "type", "origin", "message", "code", });
				StringBuilder strBuffer_tLogRow_1 = null;
				int nb_line_tLogRow_1 = 0;
				// /////////////////////

				/**
				 * [tLogRow_1 begin ] stop
				 */

				/**
				 * [tLogCatcher_1 begin ] start
				 */

				ok_Hash.put("tLogCatcher_1", false);
				start_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				currentComponent = "tLogCatcher_1";

				int tos_count_tLogCatcher_1 = 0;

				for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1
						.getMessages()) {
					row2.type = lcm.getType();
					row2.origin = (lcm.getOrigin() == null
							|| lcm.getOrigin().length() < 1 ? null : lcm
							.getOrigin());
					row2.priority = lcm.getPriority();
					row2.message = lcm.getMessage();
					row2.code = lcm.getCode();

					row2.moment = java.util.Calendar.getInstance().getTime();

					row2.pid = pid;
					row2.root_pid = rootPid;
					row2.father_pid = fatherPid;

					row2.project = projectName;
					row2.job = jobName;
					row2.context = contextStr;

					/**
					 * [tLogCatcher_1 begin ] stop
					 */
					/**
					 * [tLogCatcher_1 main ] start
					 */

					currentComponent = "tLogCatcher_1";

					tos_count_tLogCatcher_1++;

					/**
					 * [tLogCatcher_1 main ] stop
					 */

					/**
					 * [tLogRow_1 main ] start
					 */

					currentComponent = "tLogRow_1";

					// /////////////////////

					String[] row_tLogRow_1 = new String[12];

					if (row2.moment != null) { //
						row_tLogRow_1[0] = FormatterUtils.format_Date(
								row2.moment, "yyyy-MM-dd HH:mm:ss");

					} //

					if (row2.pid != null) { //
						row_tLogRow_1[1] = String.valueOf(row2.pid);

					} //

					if (row2.root_pid != null) { //
						row_tLogRow_1[2] = String.valueOf(row2.root_pid);

					} //

					if (row2.father_pid != null) { //
						row_tLogRow_1[3] = String.valueOf(row2.father_pid);

					} //

					if (row2.project != null) { //
						row_tLogRow_1[4] = String.valueOf(row2.project);

					} //

					if (row2.job != null) { //
						row_tLogRow_1[5] = String.valueOf(row2.job);

					} //

					if (row2.context != null) { //
						row_tLogRow_1[6] = String.valueOf(row2.context);

					} //

					if (row2.priority != null) { //
						row_tLogRow_1[7] = String.valueOf(row2.priority);

					} //

					if (row2.type != null) { //
						row_tLogRow_1[8] = String.valueOf(row2.type);

					} //

					if (row2.origin != null) { //
						row_tLogRow_1[9] = String.valueOf(row2.origin);

					} //

					if (row2.message != null) { //
						row_tLogRow_1[10] = String.valueOf(row2.message);

					} //

					if (row2.code != null) { //
						row_tLogRow_1[11] = String.valueOf(row2.code);

					} //

					util_tLogRow_1.addRow(row_tLogRow_1);
					nb_line_tLogRow_1++;
					// ////

					// ////

					// /////////////////////

					tos_count_tLogRow_1++;

					/**
					 * [tLogRow_1 main ] stop
					 */

					/**
					 * [tLogCatcher_1 end ] start
					 */

					currentComponent = "tLogCatcher_1";

				}

				ok_Hash.put("tLogCatcher_1", true);
				end_Hash.put("tLogCatcher_1", System.currentTimeMillis());

				/**
				 * [tLogCatcher_1 end ] stop
				 */

				/**
				 * [tLogRow_1 end ] start
				 */

				currentComponent = "tLogRow_1";

				// ////

				java.io.PrintStream consoleOut_tLogRow_1 = null;
				if (globalMap.get("tLogRow_CONSOLE") != null) {
					consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap
							.get("tLogRow_CONSOLE");
				} else {
					consoleOut_tLogRow_1 = new java.io.PrintStream(
							new java.io.BufferedOutputStream(System.out));
					globalMap.put("tLogRow_CONSOLE", consoleOut_tLogRow_1);
				}

				consoleOut_tLogRow_1
						.println(util_tLogRow_1.format().toString());
				consoleOut_tLogRow_1.flush();
				// ////
				globalMap.put("tLogRow_1_NB_LINE", nb_line_tLogRow_1);

				// /////////////////////

				ok_Hash.put("tLogRow_1", true);
				end_Hash.put("tLogRow_1", System.currentTimeMillis());

				/**
				 * [tLogRow_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tLogCatcher_1 finally ] start
				 */

				currentComponent = "tLogCatcher_1";

				/**
				 * [tLogCatcher_1 finally ] stop
				 */

				/**
				 * [tLogRow_1 finally ] start
				 */

				currentComponent = "tLogRow_1";

				/**
				 * [tLogRow_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}

	public static class OpenDJStruct implements
			routines.system.IPersistableRow<OpenDJStruct> {
		final static byte[] commonByteArrayLock_MOT2_userSync = new byte[0];
		static byte[] commonByteArray_MOT2_userSync = new byte[0];

		public String motUser;

		public String getMotUser() {
			return this.motUser;
		}

		public String oAthCounter;

		public String getOAthCounter() {
			return this.oAthCounter;
		}

		public String associatedName;

		public String getAssociatedName() {
			return this.associatedName;
		}

		public String audio;

		public String getAudio() {
			return this.audio;
		}

		public String businessCategory;

		public String getBusinessCategory() {
			return this.businessCategory;
		}

		public String carLicense;

		public String getCarLicense() {
			return this.carLicense;
		}

		public String cn;

		public String getCn() {
			return this.cn;
		}

		public String dc;

		public String getDc() {
			return this.dc;
		}

		public String departmentNumber;

		public String getDepartmentNumber() {
			return this.departmentNumber;
		}

		public String description;

		public String getDescription() {
			return this.description;
		}

		public String destinationIndicator;

		public String getDestinationIndicator() {
			return this.destinationIndicator;
		}

		public String displayName;

		public String getDisplayName() {
			return this.displayName;
		}

		public String domain;

		public String getDomain() {
			return this.domain;
		}

		public String employeeNumber;

		public String getEmployeeNumber() {
			return this.employeeNumber;
		}

		public String employeeType;

		public String getEmployeeType() {
			return this.employeeType;
		}

		public String facsimileTelephoneNumber;

		public String getFacsimileTelephoneNumber() {
			return this.facsimileTelephoneNumber;
		}

		public String givenName;

		public String getGivenName() {
			return this.givenName;
		}

		public String groupOfNames;

		public String getGroupOfNames() {
			return this.groupOfNames;
		}

		public String homePhone;

		public String getHomePhone() {
			return this.homePhone;
		}

		public String homePostalAddress;

		public String getHomePostalAddress() {
			return this.homePostalAddress;
		}

		public String initials;

		public String getInitials() {
			return this.initials;
		}

		public String internationaliSDNNumber;

		public String getInternationaliSDNNumber() {
			return this.internationaliSDNNumber;
		}

		public String jpegPhoto;

		public String getJpegPhoto() {
			return this.jpegPhoto;
		}

		public String labeledURI;

		public String getLabeledURI() {
			return this.labeledURI;
		}

		public String mail;

		public String getMail() {
			return this.mail;
		}

		public String manager;

		public String getManager() {
			return this.manager;
		}

		public String member;

		public String getMember() {
			return this.member;
		}

		public String mobile;

		public String getMobile() {
			return this.mobile;
		}

		public String oAthSecret;

		public String getOAthSecret() {
			return this.oAthSecret;
		}

		public String oAthTokenID;

		public String getOAthTokenID() {
			return this.oAthTokenID;
		}

		public String objectClass;

		public String getObjectClass() {
			return this.objectClass;
		}

		public String ou;

		public String getOu() {
			return this.ou;
		}

		public String owner;

		public String getOwner() {
			return this.owner;
		}

		public String pager;

		public String getPager() {
			return this.pager;
		}

		public String person;

		public String getPerson() {
			return this.person;
		}

		public String photo;

		public String getPhoto() {
			return this.photo;
		}

		public String physicalDeliveryOfficeName;

		public String getPhysicalDeliveryOfficeName() {
			return this.physicalDeliveryOfficeName;
		}

		public String postOfficeBox;

		public String getPostOfficeBox() {
			return this.postOfficeBox;
		}

		public String postalAddress;

		public String getPostalAddress() {
			return this.postalAddress;
		}

		public String postalCode;

		public String getPostalCode() {
			return this.postalCode;
		}

		public String preferredDeliveryMethod;

		public String getPreferredDeliveryMethod() {
			return this.preferredDeliveryMethod;
		}

		public String preferredLanguage;

		public String getPreferredLanguage() {
			return this.preferredLanguage;
		}

		public String registeredAddress;

		public String getRegisteredAddress() {
			return this.registeredAddress;
		}

		public String roomNumber;

		public String getRoomNumber() {
			return this.roomNumber;
		}

		public String searchGuide;

		public String getSearchGuide() {
			return this.searchGuide;
		}

		public String secretary;

		public String getSecretary() {
			return this.secretary;
		}

		public String seeAlso;

		public String getSeeAlso() {
			return this.seeAlso;
		}

		public String sn;

		public String getSn() {
			return this.sn;
		}

		public String st;

		public String getSt() {
			return this.st;
		}

		public String street;

		public String getStreet() {
			return this.street;
		}

		public String telephoneNumber;

		public String getTelephoneNumber() {
			return this.telephoneNumber;
		}

		public String teletexTerminalIdentifier;

		public String getTeletexTerminalIdentifier() {
			return this.teletexTerminalIdentifier;
		}

		public String telexNumber;

		public String getTelexNumber() {
			return this.telexNumber;
		}

		public String title;

		public String getTitle() {
			return this.title;
		}

		public String top;

		public String getTop() {
			return this.top;
		}

		public String uid;

		public String getUid() {
			return this.uid;
		}

		public String userCertificate;

		public String getUserCertificate() {
			return this.userCertificate;
		}

		public String userPKCS12;

		public String getUserPKCS12() {
			return this.userPKCS12;
		}

		public String userPassword;

		public String getUserPassword() {
			return this.userPassword;
		}

		public String userSMIMECertificate;

		public String getUserSMIMECertificate() {
			return this.userSMIMECertificate;
		}

		public String x121Address;

		public String getX121Address() {
			return this.x121Address;
		}

		public String x500UniqueIdentifier;

		public String getX500UniqueIdentifier() {
			return this.x500UniqueIdentifier;
		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MOT2_userSync.length) {
					if (length < 1024
							&& commonByteArray_MOT2_userSync.length == 0) {
						commonByteArray_MOT2_userSync = new byte[1024];
					} else {
						commonByteArray_MOT2_userSync = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MOT2_userSync, 0, length);
				strReturn = new String(commonByteArray_MOT2_userSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MOT2_userSync) {

				try {

					int length = 0;

					this.motUser = readString(dis);

					this.oAthCounter = readString(dis);

					this.associatedName = readString(dis);

					this.audio = readString(dis);

					this.businessCategory = readString(dis);

					this.carLicense = readString(dis);

					this.cn = readString(dis);

					this.dc = readString(dis);

					this.departmentNumber = readString(dis);

					this.description = readString(dis);

					this.destinationIndicator = readString(dis);

					this.displayName = readString(dis);

					this.domain = readString(dis);

					this.employeeNumber = readString(dis);

					this.employeeType = readString(dis);

					this.facsimileTelephoneNumber = readString(dis);

					this.givenName = readString(dis);

					this.groupOfNames = readString(dis);

					this.homePhone = readString(dis);

					this.homePostalAddress = readString(dis);

					this.initials = readString(dis);

					this.internationaliSDNNumber = readString(dis);

					this.jpegPhoto = readString(dis);

					this.labeledURI = readString(dis);

					this.mail = readString(dis);

					this.manager = readString(dis);

					this.member = readString(dis);

					this.mobile = readString(dis);

					this.oAthSecret = readString(dis);

					this.oAthTokenID = readString(dis);

					this.objectClass = readString(dis);

					this.ou = readString(dis);

					this.owner = readString(dis);

					this.pager = readString(dis);

					this.person = readString(dis);

					this.photo = readString(dis);

					this.physicalDeliveryOfficeName = readString(dis);

					this.postOfficeBox = readString(dis);

					this.postalAddress = readString(dis);

					this.postalCode = readString(dis);

					this.preferredDeliveryMethod = readString(dis);

					this.preferredLanguage = readString(dis);

					this.registeredAddress = readString(dis);

					this.roomNumber = readString(dis);

					this.searchGuide = readString(dis);

					this.secretary = readString(dis);

					this.seeAlso = readString(dis);

					this.sn = readString(dis);

					this.st = readString(dis);

					this.street = readString(dis);

					this.telephoneNumber = readString(dis);

					this.teletexTerminalIdentifier = readString(dis);

					this.telexNumber = readString(dis);

					this.title = readString(dis);

					this.top = readString(dis);

					this.uid = readString(dis);

					this.userCertificate = readString(dis);

					this.userPKCS12 = readString(dis);

					this.userPassword = readString(dis);

					this.userSMIMECertificate = readString(dis);

					this.x121Address = readString(dis);

					this.x500UniqueIdentifier = readString(dis);

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// String

				writeString(this.motUser, dos);

				// String

				writeString(this.oAthCounter, dos);

				// String

				writeString(this.associatedName, dos);

				// String

				writeString(this.audio, dos);

				// String

				writeString(this.businessCategory, dos);

				// String

				writeString(this.carLicense, dos);

				// String

				writeString(this.cn, dos);

				// String

				writeString(this.dc, dos);

				// String

				writeString(this.departmentNumber, dos);

				// String

				writeString(this.description, dos);

				// String

				writeString(this.destinationIndicator, dos);

				// String

				writeString(this.displayName, dos);

				// String

				writeString(this.domain, dos);

				// String

				writeString(this.employeeNumber, dos);

				// String

				writeString(this.employeeType, dos);

				// String

				writeString(this.facsimileTelephoneNumber, dos);

				// String

				writeString(this.givenName, dos);

				// String

				writeString(this.groupOfNames, dos);

				// String

				writeString(this.homePhone, dos);

				// String

				writeString(this.homePostalAddress, dos);

				// String

				writeString(this.initials, dos);

				// String

				writeString(this.internationaliSDNNumber, dos);

				// String

				writeString(this.jpegPhoto, dos);

				// String

				writeString(this.labeledURI, dos);

				// String

				writeString(this.mail, dos);

				// String

				writeString(this.manager, dos);

				// String

				writeString(this.member, dos);

				// String

				writeString(this.mobile, dos);

				// String

				writeString(this.oAthSecret, dos);

				// String

				writeString(this.oAthTokenID, dos);

				// String

				writeString(this.objectClass, dos);

				// String

				writeString(this.ou, dos);

				// String

				writeString(this.owner, dos);

				// String

				writeString(this.pager, dos);

				// String

				writeString(this.person, dos);

				// String

				writeString(this.photo, dos);

				// String

				writeString(this.physicalDeliveryOfficeName, dos);

				// String

				writeString(this.postOfficeBox, dos);

				// String

				writeString(this.postalAddress, dos);

				// String

				writeString(this.postalCode, dos);

				// String

				writeString(this.preferredDeliveryMethod, dos);

				// String

				writeString(this.preferredLanguage, dos);

				// String

				writeString(this.registeredAddress, dos);

				// String

				writeString(this.roomNumber, dos);

				// String

				writeString(this.searchGuide, dos);

				// String

				writeString(this.secretary, dos);

				// String

				writeString(this.seeAlso, dos);

				// String

				writeString(this.sn, dos);

				// String

				writeString(this.st, dos);

				// String

				writeString(this.street, dos);

				// String

				writeString(this.telephoneNumber, dos);

				// String

				writeString(this.teletexTerminalIdentifier, dos);

				// String

				writeString(this.telexNumber, dos);

				// String

				writeString(this.title, dos);

				// String

				writeString(this.top, dos);

				// String

				writeString(this.uid, dos);

				// String

				writeString(this.userCertificate, dos);

				// String

				writeString(this.userPKCS12, dos);

				// String

				writeString(this.userPassword, dos);

				// String

				writeString(this.userSMIMECertificate, dos);

				// String

				writeString(this.x121Address, dos);

				// String

				writeString(this.x500UniqueIdentifier, dos);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("motUser=" + motUser);
			sb.append(",oAthCounter=" + oAthCounter);
			sb.append(",associatedName=" + associatedName);
			sb.append(",audio=" + audio);
			sb.append(",businessCategory=" + businessCategory);
			sb.append(",carLicense=" + carLicense);
			sb.append(",cn=" + cn);
			sb.append(",dc=" + dc);
			sb.append(",departmentNumber=" + departmentNumber);
			sb.append(",description=" + description);
			sb.append(",destinationIndicator=" + destinationIndicator);
			sb.append(",displayName=" + displayName);
			sb.append(",domain=" + domain);
			sb.append(",employeeNumber=" + employeeNumber);
			sb.append(",employeeType=" + employeeType);
			sb.append(",facsimileTelephoneNumber=" + facsimileTelephoneNumber);
			sb.append(",givenName=" + givenName);
			sb.append(",groupOfNames=" + groupOfNames);
			sb.append(",homePhone=" + homePhone);
			sb.append(",homePostalAddress=" + homePostalAddress);
			sb.append(",initials=" + initials);
			sb.append(",internationaliSDNNumber=" + internationaliSDNNumber);
			sb.append(",jpegPhoto=" + jpegPhoto);
			sb.append(",labeledURI=" + labeledURI);
			sb.append(",mail=" + mail);
			sb.append(",manager=" + manager);
			sb.append(",member=" + member);
			sb.append(",mobile=" + mobile);
			sb.append(",oAthSecret=" + oAthSecret);
			sb.append(",oAthTokenID=" + oAthTokenID);
			sb.append(",objectClass=" + objectClass);
			sb.append(",ou=" + ou);
			sb.append(",owner=" + owner);
			sb.append(",pager=" + pager);
			sb.append(",person=" + person);
			sb.append(",photo=" + photo);
			sb.append(",physicalDeliveryOfficeName="
					+ physicalDeliveryOfficeName);
			sb.append(",postOfficeBox=" + postOfficeBox);
			sb.append(",postalAddress=" + postalAddress);
			sb.append(",postalCode=" + postalCode);
			sb.append(",preferredDeliveryMethod=" + preferredDeliveryMethod);
			sb.append(",preferredLanguage=" + preferredLanguage);
			sb.append(",registeredAddress=" + registeredAddress);
			sb.append(",roomNumber=" + roomNumber);
			sb.append(",searchGuide=" + searchGuide);
			sb.append(",secretary=" + secretary);
			sb.append(",seeAlso=" + seeAlso);
			sb.append(",sn=" + sn);
			sb.append(",st=" + st);
			sb.append(",street=" + street);
			sb.append(",telephoneNumber=" + telephoneNumber);
			sb.append(",teletexTerminalIdentifier=" + teletexTerminalIdentifier);
			sb.append(",telexNumber=" + telexNumber);
			sb.append(",title=" + title);
			sb.append(",top=" + top);
			sb.append(",uid=" + uid);
			sb.append(",userCertificate=" + userCertificate);
			sb.append(",userPKCS12=" + userPKCS12);
			sb.append(",userPassword=" + userPassword);
			sb.append(",userSMIMECertificate=" + userSMIMECertificate);
			sb.append(",x121Address=" + x121Address);
			sb.append(",x500UniqueIdentifier=" + x500UniqueIdentifier);
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(OpenDJStruct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public static class row1Struct implements
			routines.system.IPersistableRow<row1Struct> {
		final static byte[] commonByteArrayLock_MOT2_userSync = new byte[0];
		static byte[] commonByteArray_MOT2_userSync = new byte[0];

		public long id;

		public long getId() {
			return this.id;
		}

		public String username;

		public String getUsername() {
			return this.username;
		}

		public String pin;

		public String getPin() {
			return this.pin;
		}

		public String user_reference;

		public String getUser_reference() {
			return this.user_reference;
		}

		public String mot_one_user_id;

		public String getMot_one_user_id() {
			return this.mot_one_user_id;
		}

		public Integer title_id;

		public Integer getTitle_id() {
			return this.title_id;
		}

		public String first_name;

		public String getFirst_name() {
			return this.first_name;
		}

		public String middle_name;

		public String getMiddle_name() {
			return this.middle_name;
		}

		public String family_name;

		public String getFamily_name() {
			return this.family_name;
		}

		public Long driving_licence_id;

		public Long getDriving_licence_id() {
			return this.driving_licence_id;
		}

		public Integer gender_id;

		public Integer getGender_id() {
			return this.gender_id;
		}

		public java.util.Date date_of_birth;

		public java.util.Date getDate_of_birth() {
			return this.date_of_birth;
		}

		public String disability;

		public String getDisability() {
			return this.disability;
		}

		public Integer demo_test_tester_status_id;

		public Integer getDemo_test_tester_status_id() {
			return this.demo_test_tester_status_id;
		}

		public Integer otp_failed_attempts;

		public Integer getOtp_failed_attempts() {
			return this.otp_failed_attempts;
		}

		public Short is_account_claim_required;

		public Short getIs_account_claim_required() {
			return this.is_account_claim_required;
		}

		public Integer transition_status_id;

		public Integer getTransition_status_id() {
			return this.transition_status_id;
		}

		public String mot1_userid;

		public String getMot1_userid() {
			return this.mot1_userid;
		}

		public String mot1_current_smartcard_id;

		public String getMot1_current_smartcard_id() {
			return this.mot1_current_smartcard_id;
		}

		public String _fa_token_id;

		public String get_fa_token_id() {
			return this._fa_token_id;
		}

		public java.util.Date _fa_token_sent_on;

		public java.util.Date get_fa_token_sent_on() {
			return this._fa_token_sent_on;
		}

		public java.util.Date details_confirmed_on;

		public java.util.Date getDetails_confirmed_on() {
			return this.details_confirmed_on;
		}

		public java.util.Date first_training_test_done_on;

		public java.util.Date getFirst_training_test_done_on() {
			return this.first_training_test_done_on;
		}

		public java.util.Date first_live_test_done_on;

		public java.util.Date getFirst_live_test_done_on() {
			return this.first_live_test_done_on;
		}

		public java.util.Date mot1_details_updated_on;

		public java.util.Date getMot1_details_updated_on() {
			return this.mot1_details_updated_on;
		}

//		public String mot1_legacy_id;
//
//		public String getMot1_legacy_id() {
//			return this.mot1_legacy_id;
//		}

		public long created_by;

		public long getCreated_by() {
			return this.created_by;
		}

		public java.util.Date created_on;

		public java.util.Date getCreated_on() {
			return this.created_on;
		}

		public Long last_updated_by;

		public Long getLast_updated_by() {
			return this.last_updated_by;
		}

		public java.util.Date last_updated_on;

		public java.util.Date getLast_updated_on() {
			return this.last_updated_on;
		}

		public long version;

		public long getVersion() {
			return this.version;
		}

//		public long batch_number;
//
//		public long getBatch_number() {
//			return this.batch_number;
//		}

		private String readString(ObjectInputStream dis) throws IOException {
			String strReturn = null;
			int length = 0;
			length = dis.readInt();
			if (length == -1) {
				strReturn = null;
			} else {
				if (length > commonByteArray_MOT2_userSync.length) {
					if (length < 1024
							&& commonByteArray_MOT2_userSync.length == 0) {
						commonByteArray_MOT2_userSync = new byte[1024];
					} else {
						commonByteArray_MOT2_userSync = new byte[2 * length];
					}
				}
				dis.readFully(commonByteArray_MOT2_userSync, 0, length);
				strReturn = new String(commonByteArray_MOT2_userSync, 0,
						length, utf8Charset);
			}
			return strReturn;
		}

		private void writeString(String str, ObjectOutputStream dos)
				throws IOException {
			if (str == null) {
				dos.writeInt(-1);
			} else {
				byte[] byteArray = str.getBytes(utf8Charset);
				dos.writeInt(byteArray.length);
				dos.write(byteArray);
			}
		}

		private Integer readInteger(ObjectInputStream dis) throws IOException {
			Integer intReturn;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				intReturn = null;
			} else {
				intReturn = dis.readInt();
			}
			return intReturn;
		}

		private void writeInteger(Integer intNum, ObjectOutputStream dos)
				throws IOException {
			if (intNum == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeInt(intNum);
			}
		}

		private java.util.Date readDate(ObjectInputStream dis)
				throws IOException {
			java.util.Date dateReturn = null;
			int length = 0;
			length = dis.readByte();
			if (length == -1) {
				dateReturn = null;
			} else {
				dateReturn = new Date(dis.readLong());
			}
			return dateReturn;
		}

		private void writeDate(java.util.Date date1, ObjectOutputStream dos)
				throws IOException {
			if (date1 == null) {
				dos.writeByte(-1);
			} else {
				dos.writeByte(0);
				dos.writeLong(date1.getTime());
			}
		}

		public void readData(ObjectInputStream dis) {

			synchronized (commonByteArrayLock_MOT2_userSync) {

				try {

					int length = 0;

					this.id = dis.readLong();

					this.username = readString(dis);

					this.pin = readString(dis);

					this.user_reference = readString(dis);

					this.mot_one_user_id = readString(dis);

					this.title_id = readInteger(dis);

					this.first_name = readString(dis);

					this.middle_name = readString(dis);

					this.family_name = readString(dis);

					length = dis.readByte();
					if (length == -1) {
						this.driving_licence_id = null;
					} else {
						this.driving_licence_id = dis.readLong();
					}

					this.gender_id = readInteger(dis);

					this.date_of_birth = readDate(dis);

					this.disability = readString(dis);

					this.demo_test_tester_status_id = readInteger(dis);

					this.otp_failed_attempts = readInteger(dis);

					length = dis.readByte();
					if (length == -1) {
						this.is_account_claim_required = null;
					} else {
						this.is_account_claim_required = dis.readShort();
					}

					this.transition_status_id = readInteger(dis);

					this.mot1_userid = readString(dis);

					this.mot1_current_smartcard_id = readString(dis);

					this._fa_token_id = readString(dis);

					this._fa_token_sent_on = readDate(dis);

					this.details_confirmed_on = readDate(dis);

					this.first_training_test_done_on = readDate(dis);

					this.first_live_test_done_on = readDate(dis);

					this.mot1_details_updated_on = readDate(dis);

				//	this.mot1_legacy_id = readString(dis);

					this.created_by = dis.readLong();

					this.created_on = readDate(dis);

					length = dis.readByte();
					if (length == -1) {
						this.last_updated_by = null;
					} else {
						this.last_updated_by = dis.readLong();
					}

					this.last_updated_on = readDate(dis);

					this.version = dis.readLong();

				//	this.batch_number = dis.readLong();

				} catch (IOException e) {
					throw new RuntimeException(e);

				}

			}

		}

		public void writeData(ObjectOutputStream dos) {
			try {

				// long

				dos.writeLong(this.id);

				// String

				writeString(this.username, dos);

				// String

				writeString(this.pin, dos);

				// String

				writeString(this.user_reference, dos);

				// String

				writeString(this.mot_one_user_id, dos);

				// Integer

				writeInteger(this.title_id, dos);

				// String

				writeString(this.first_name, dos);

				// String

				writeString(this.middle_name, dos);

				// String

				writeString(this.family_name, dos);

				// Long

				if (this.driving_licence_id == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.driving_licence_id);
				}

				// Integer

				writeInteger(this.gender_id, dos);

				// java.util.Date

				writeDate(this.date_of_birth, dos);

				// String

				writeString(this.disability, dos);

				// Integer

				writeInteger(this.demo_test_tester_status_id, dos);

				// Integer

				writeInteger(this.otp_failed_attempts, dos);

				// Short

				if (this.is_account_claim_required == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeShort(this.is_account_claim_required);
				}

				// Integer

				writeInteger(this.transition_status_id, dos);

				// String

				writeString(this.mot1_userid, dos);

				// String

				writeString(this.mot1_current_smartcard_id, dos);

				// String

				writeString(this._fa_token_id, dos);

				// java.util.Date

				writeDate(this._fa_token_sent_on, dos);

				// java.util.Date

				writeDate(this.details_confirmed_on, dos);

				// java.util.Date

				writeDate(this.first_training_test_done_on, dos);

				// java.util.Date

				writeDate(this.first_live_test_done_on, dos);

				// java.util.Date

				writeDate(this.mot1_details_updated_on, dos);

				// String

			//	writeString(this.mot1_legacy_id, dos);

				// long

				dos.writeLong(this.created_by);

				// java.util.Date

				writeDate(this.created_on, dos);

				// Long

				if (this.last_updated_by == null) {
					dos.writeByte(-1);
				} else {
					dos.writeByte(0);
					dos.writeLong(this.last_updated_by);
				}

				// java.util.Date

				writeDate(this.last_updated_on, dos);

				// long

				dos.writeLong(this.version);

				// long

		//		dos.writeLong(this.batch_number);

			} catch (IOException e) {
				throw new RuntimeException(e);
			}

		}

		public String toString() {

			StringBuilder sb = new StringBuilder();
			sb.append(super.toString());
			sb.append("[");
			sb.append("id=" + String.valueOf(id));
			sb.append(",username=" + username);
			sb.append(",pin=" + pin);
			sb.append(",user_reference=" + user_reference);
			sb.append(",mot_one_user_id=" + mot_one_user_id);
			sb.append(",title_id=" + String.valueOf(title_id));
			sb.append(",first_name=" + first_name);
			sb.append(",middle_name=" + middle_name);
			sb.append(",family_name=" + family_name);
			sb.append(",driving_licence_id="
					+ String.valueOf(driving_licence_id));
			sb.append(",gender_id=" + String.valueOf(gender_id));
			sb.append(",date_of_birth=" + String.valueOf(date_of_birth));
			sb.append(",disability=" + disability);
			sb.append(",demo_test_tester_status_id="
					+ String.valueOf(demo_test_tester_status_id));
			sb.append(",otp_failed_attempts="
					+ String.valueOf(otp_failed_attempts));
			sb.append(",is_account_claim_required="
					+ String.valueOf(is_account_claim_required));
			sb.append(",transition_status_id="
					+ String.valueOf(transition_status_id));
			sb.append(",mot1_userid=" + mot1_userid);
			sb.append(",mot1_current_smartcard_id=" + mot1_current_smartcard_id);
			sb.append(",_fa_token_id=" + _fa_token_id);
			sb.append(",_fa_token_sent_on=" + String.valueOf(_fa_token_sent_on));
			sb.append(",details_confirmed_on="
					+ String.valueOf(details_confirmed_on));
			sb.append(",first_training_test_done_on="
					+ String.valueOf(first_training_test_done_on));
			sb.append(",first_live_test_done_on="
					+ String.valueOf(first_live_test_done_on));
			sb.append(",mot1_details_updated_on="
					+ String.valueOf(mot1_details_updated_on));
		//	sb.append(",mot1_legacy_id=" + mot1_legacy_id);
			sb.append(",created_by=" + String.valueOf(created_by));
			sb.append(",created_on=" + String.valueOf(created_on));
			sb.append(",last_updated_by=" + String.valueOf(last_updated_by));
			sb.append(",last_updated_on=" + String.valueOf(last_updated_on));
			sb.append(",version=" + String.valueOf(version));
		//	sb.append(",batch_number=" + String.valueOf(batch_number));
			sb.append("]");

			return sb.toString();
		}

		/**
		 * Compare keys
		 */
		public int compareTo(row1Struct other) {

			int returnValue = -1;

			return returnValue;
		}

		private int checkNullsAndCompare(Object object1, Object object2) {
			int returnValue = 0;
			if (object1 instanceof Comparable && object2 instanceof Comparable) {
				returnValue = ((Comparable) object1).compareTo(object2);
			} else if (object1 != null && object2 != null) {
				returnValue = compareStrings(object1.toString(),
						object2.toString());
			} else if (object1 == null && object2 != null) {
				returnValue = 1;
			} else if (object1 != null && object2 == null) {
				returnValue = -1;
			} else {
				returnValue = 0;
			}

			return returnValue;
		}

		private int compareStrings(String string1, String string2) {
			return string1.compareTo(string2);
		}

	}

	public void tMysqlInput_1Process(
			final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				row1Struct row1 = new row1Struct();
				OpenDJStruct OpenDJ = new OpenDJStruct();

				/**
				 * [tLDAPOutput_1 begin ] start
				 */

				ok_Hash.put("tLDAPOutput_1", false);
				start_Hash.put("tLDAPOutput_1", System.currentTimeMillis());

				currentComponent = "tLDAPOutput_1";

				int tos_count_tLDAPOutput_1 = 0;

				java.util.Hashtable env_tLDAPOutput_1 = new java.util.Hashtable();
				env_tLDAPOutput_1.put(
						javax.naming.Context.INITIAL_CONTEXT_FACTORY,
						"com.sun.jndi.ldap.LdapCtxFactory");
				env_tLDAPOutput_1.put(
						javax.naming.Context.SECURITY_AUTHENTICATION, "simple");// "none","simple","strong"
				env_tLDAPOutput_1.put(javax.naming.Context.SECURITY_PRINCIPAL,
						"cn=Directory Manager");

				final String decryptedPassword_tLDAPOutput_1 = context.ldapPassword;
				env_tLDAPOutput_1.put(
						javax.naming.Context.SECURITY_CREDENTIALS,
						decryptedPassword_tLDAPOutput_1);
				env_tLDAPOutput_1.put(javax.naming.Context.REFERRAL, "ignore");
				env_tLDAPOutput_1
						.put("java.naming.ldap.derefAliases", "always");
				String baseDN_tLDAPOutput_1 = context.ldapBaseDN;
				env_tLDAPOutput_1.put(javax.naming.Context.PROVIDER_URL,
						"ldap://" + context.ldapHost + ":" + context.ldapPort
								+ "/" + context.ldapBaseDN);
				javax.naming.ldap.InitialLdapContext ctx_tLDAPOutput_1 = new javax.naming.ldap.InitialLdapContext(
						env_tLDAPOutput_1, null);
				boolean whetherReject_tLDAPOutput_1 = false;
				int nb_line_tLDAPOutput_1 = 0;
				// check is base64 begin
				class CheckBase64_tLDAPOutput_1 {
					public void checkByteArray(boolean isBase64,
							String columnName,
							javax.naming.directory.Attributes entry,
							byte[] bytearray)
							throws com.sun.org.apache.xml.internal.security.exceptions.Base64DecodingException {
						if (isBase64) {
							entry.put(
									columnName,
									com.sun.org.apache.xml.internal.security.utils.Base64
											.decode(bytearray));
						} else {
							entry.put(columnName, bytearray);
						}
					}

					public void checkString(boolean isBase64,
							String columnName,
							javax.naming.directory.Attributes entry,
							String inputValue)
							throws com.sun.org.apache.xml.internal.security.exceptions.Base64DecodingException {
						if (isBase64) {
							entry.put(
									columnName,
									com.sun.org.apache.xml.internal.security.utils.Base64
											.decode(inputValue));
						} else {
							entry.put(columnName, inputValue);
						}
					}

					public void addToAttribute(boolean isBase64,
							javax.naming.directory.Attribute attr,
							String inputValue)
							throws com.sun.org.apache.xml.internal.security.exceptions.Base64DecodingException {
						if (isBase64) {
							attr.add(com.sun.org.apache.xml.internal.security.utils.Base64
									.decode(inputValue));
						} else {
							attr.add(inputValue);
						}
					}

					public void checkByteArrayUpdate(boolean isBase64,
							String columnName,
							List<javax.naming.directory.Attribute> forUpate,
							byte[] bytearray)
							throws com.sun.org.apache.xml.internal.security.exceptions.Base64DecodingException {
						if (isBase64) {
							forUpate.add(new javax.naming.directory.BasicAttribute(
									columnName,
									com.sun.org.apache.xml.internal.security.utils.Base64
											.decode(bytearray)));
						} else {
							forUpate.add(new javax.naming.directory.BasicAttribute(
									columnName, bytearray));
						}
					}

					public void checkStringUpdate(boolean isBase64,
							String columnName,
							List<javax.naming.directory.Attribute> forUpate,
							String inputValue)
							throws com.sun.org.apache.xml.internal.security.exceptions.Base64DecodingException {
						if (isBase64) {
							forUpate.add(new javax.naming.directory.BasicAttribute(
									columnName,
									com.sun.org.apache.xml.internal.security.utils.Base64
											.decode(inputValue)));
						} else {
							forUpate.add(new javax.naming.directory.BasicAttribute(
									columnName, inputValue));
						}
					}

					public void checkStringUpdateAttr(boolean isBase64,
							String columnName,
							javax.naming.directory.Attribute attrForUpdate,
							String inputValue)
							throws com.sun.org.apache.xml.internal.security.exceptions.Base64DecodingException {
						if (isBase64) {
							attrForUpdate
									.add(com.sun.org.apache.xml.internal.security.utils.Base64
											.decode(inputValue));
						} else {
							attrForUpdate.add(inputValue);
						}
					}

					public String filterNullElement(String srcData,
							String splitStr) {
						String result = "";
						String[] tempArr = routines.system.StringUtils
								.splitNotRegex(srcData, splitStr);
						for (int i = 0; i < tempArr.length; i++) {
							if (tempArr[i] != null
									&& !"".equals(tempArr[i].trim())) {
								if (!"".equals(result)) {
									result = result + splitStr;
								}
								result = result + tempArr[i];
							}
						}
						return result;
					}
				}
				CheckBase64_tLDAPOutput_1 base64_tLDAPOutput_1 = new CheckBase64_tLDAPOutput_1();
				// check is base64 end

				/**
				 * [tLDAPOutput_1 begin ] stop
				 */

				/**
				 * [tMap_1 begin ] start
				 */

				ok_Hash.put("tMap_1", false);
				start_Hash.put("tMap_1", System.currentTimeMillis());

				currentComponent = "tMap_1";

				int tos_count_tMap_1 = 0;

				// ###############################
				// # Lookup's keys initialization
				// ###############################

				// ###############################
				// # Vars initialization
				class Var__tMap_1__Struct {
				}
				Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
				// ###############################

				// ###############################
				// # Outputs initialization
				OpenDJStruct OpenDJ_tmp = new OpenDJStruct();
				// ###############################

				/**
				 * [tMap_1 begin ] stop
				 */

				/**
				 * [tMysqlInput_1 begin ] start
				 */

				ok_Hash.put("tMysqlInput_1", false);
				start_Hash.put("tMysqlInput_1", System.currentTimeMillis());

				currentComponent = "tMysqlInput_1";

				int tos_count_tMysqlInput_1 = 0;

				java.util.Calendar calendar_tMysqlInput_1 = java.util.Calendar
						.getInstance();
				calendar_tMysqlInput_1.set(0, 0, 0, 0, 0, 0);
				java.util.Date year0_tMysqlInput_1 = calendar_tMysqlInput_1
						.getTime();
				int nb_line_tMysqlInput_1 = 0;
				java.sql.Connection conn_tMysqlInput_1 = null;
				java.lang.Class.forName("org.gjt.mm.mysql.Driver");
				String dbUser_tMysqlInput_1 = context.databaseUserName;

				final String decryptedPassword_tMysqlInput_1 = context.databasePassword;
				String dbPwd_tMysqlInput_1 = decryptedPassword_tMysqlInput_1;

				String url_tMysqlInput_1 = "jdbc:mysql://"
						+ context.databaseHost + ":" + context.databasePort
						+ "/" + context.databaseName + "?"
						+ "noDatetimeStringSync=true";

				conn_tMysqlInput_1 = java.sql.DriverManager.getConnection(
						url_tMysqlInput_1, dbUser_tMysqlInput_1,
						dbPwd_tMysqlInput_1);

				java.sql.Statement stmt_tMysqlInput_1 = conn_tMysqlInput_1
						.createStatement();

				String dbquery_tMysqlInput_1 = "SELECT \n  `person`.`id`, \n  `person`.`username`, \n  `person`.`pin`, \n  `person`.`user_reference`, \n  `person`.`mot_one_user_id`, \n  `person`.`title_id`, \n  `person`.`first_name`, \n  `person`.`middle_name`, \n  `person`.`family_name`, \n  `person`.`driving_licence_id`, \n  `person`.`gender_id`, \n  `person`.`date_of_birth`, \n  `person`.`disability`, \n  `person`.`demo_test_tester_status_id`, \n  `person`.`otp_failed_attempts`, \n  `person`.`is_account_claim_required`, \n  `person`.`transition_status_id`, \n  `person`.`mot1_userid`, \n  `person`.`mot1_current_smartcard_id`, \n  `person`.`2fa_token_id`, \n  `person`.`2fa_token_sent_on`, \n  `person`.`details_confirmed_on`, \n  `person`.`first_training_test_done_on`, \n  `person`.`first_live_test_done_on`, \n  `person`.`mot1_details_updated_on`, \n  `person`.`created_by`, \n  `person`.`created_on`, \n  `person`.`last_updated_by`, \n  `person`.`last_updated_on`, \n  `person`.`version`\nFROM `person`";

				globalMap.put("tMysqlInput_1_QUERY", dbquery_tMysqlInput_1);
				java.sql.ResultSet rs_tMysqlInput_1 = null;
				try {
					rs_tMysqlInput_1 = stmt_tMysqlInput_1
							.executeQuery(dbquery_tMysqlInput_1);
					java.sql.ResultSetMetaData rsmd_tMysqlInput_1 = rs_tMysqlInput_1
							.getMetaData();
					int colQtyInRs_tMysqlInput_1 = rsmd_tMysqlInput_1
							.getColumnCount();

					String tmpContent_tMysqlInput_1 = null;

					while (rs_tMysqlInput_1.next()) {
						nb_line_tMysqlInput_1++;

						if (colQtyInRs_tMysqlInput_1 < 1) {
							row1.id = 0;
						} else {

							if (rs_tMysqlInput_1.getObject(1) != null) {
								row1.id = rs_tMysqlInput_1.getLong(1);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 2) {
							row1.username = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(2);
							if (tmpContent_tMysqlInput_1 != null) {
								row1.username = tmpContent_tMysqlInput_1;
							} else {
								row1.username = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 3) {
							row1.pin = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(3);
							if (tmpContent_tMysqlInput_1 != null) {
								row1.pin = tmpContent_tMysqlInput_1;
							} else {
								row1.pin = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 4) {
							row1.user_reference = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(4);
							if (tmpContent_tMysqlInput_1 != null) {
								row1.user_reference = tmpContent_tMysqlInput_1;
							} else {
								row1.user_reference = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 5) {
							row1.mot_one_user_id = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(5);
							if (tmpContent_tMysqlInput_1 != null) {
								row1.mot_one_user_id = tmpContent_tMysqlInput_1;
							} else {
								row1.mot_one_user_id = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 6) {
							row1.title_id = null;
						} else {

							if (rs_tMysqlInput_1.getObject(6) != null) {
								row1.title_id = rs_tMysqlInput_1.getInt(6);
							} else {
								row1.title_id = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 7) {
							row1.first_name = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(7);
							if (tmpContent_tMysqlInput_1 != null) {
								row1.first_name = tmpContent_tMysqlInput_1;
							} else {
								row1.first_name = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 8) {
							row1.middle_name = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(8);
							if (tmpContent_tMysqlInput_1 != null) {
								row1.middle_name = tmpContent_tMysqlInput_1;
							} else {
								row1.middle_name = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 9) {
							row1.family_name = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(9);
							if (tmpContent_tMysqlInput_1 != null) {
								row1.family_name = tmpContent_tMysqlInput_1;
							} else {
								row1.family_name = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 10) {
							row1.driving_licence_id = null;
						} else {

							if (rs_tMysqlInput_1.getObject(10) != null) {
								row1.driving_licence_id = rs_tMysqlInput_1
										.getLong(10);
							} else {
								row1.driving_licence_id = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 11) {
							row1.gender_id = null;
						} else {

							if (rs_tMysqlInput_1.getObject(11) != null) {
								row1.gender_id = rs_tMysqlInput_1.getInt(11);
							} else {
								row1.gender_id = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 12) {
							row1.date_of_birth = null;
						} else {

							if (rs_tMysqlInput_1.getString(12) != null) {
								String dateString_tMysqlInput_1 = rs_tMysqlInput_1
										.getString(12);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_1)) {
									row1.date_of_birth = rs_tMysqlInput_1
											.getTimestamp(12);
								} else {
									row1.date_of_birth = (java.util.Date) year0_tMysqlInput_1
											.clone();
								}
							} else {
								row1.date_of_birth = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 13) {
							row1.disability = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(13);
							if (tmpContent_tMysqlInput_1 != null) {
								row1.disability = tmpContent_tMysqlInput_1;
							} else {
								row1.disability = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 14) {
							row1.demo_test_tester_status_id = null;
						} else {

							if (rs_tMysqlInput_1.getObject(14) != null) {
								row1.demo_test_tester_status_id = rs_tMysqlInput_1
										.getInt(14);
							} else {
								row1.demo_test_tester_status_id = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 15) {
							row1.otp_failed_attempts = null;
						} else {

							if (rs_tMysqlInput_1.getObject(15) != null) {
								row1.otp_failed_attempts = rs_tMysqlInput_1
										.getInt(15);
							} else {
								row1.otp_failed_attempts = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 16) {
							row1.is_account_claim_required = null;
						} else {

							if (rs_tMysqlInput_1.getObject(16) != null) {
								row1.is_account_claim_required = rs_tMysqlInput_1
										.getShort(16);
							} else {
								row1.is_account_claim_required = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 17) {
							row1.transition_status_id = null;
						} else {

							if (rs_tMysqlInput_1.getObject(17) != null) {
								row1.transition_status_id = rs_tMysqlInput_1
										.getInt(17);
							} else {
								row1.transition_status_id = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 18) {
							row1.mot1_userid = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(18);
							if (tmpContent_tMysqlInput_1 != null) {
								row1.mot1_userid = tmpContent_tMysqlInput_1;
							} else {
								row1.mot1_userid = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 19) {
							row1.mot1_current_smartcard_id = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(19);
							if (tmpContent_tMysqlInput_1 != null) {
								row1.mot1_current_smartcard_id = tmpContent_tMysqlInput_1;
							} else {
								row1.mot1_current_smartcard_id = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 20) {
							row1._fa_token_id = null;
						} else {

							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
									.getString(20);
							if (tmpContent_tMysqlInput_1 != null) {
								row1._fa_token_id = tmpContent_tMysqlInput_1;
							} else {
								row1._fa_token_id = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 21) {
							row1._fa_token_sent_on = null;
						} else {

							if (rs_tMysqlInput_1.getString(21) != null) {
								String dateString_tMysqlInput_1 = rs_tMysqlInput_1
										.getString(21);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_1)) {
									row1._fa_token_sent_on = rs_tMysqlInput_1
											.getTimestamp(21);
								} else {
									row1._fa_token_sent_on = (java.util.Date) year0_tMysqlInput_1
											.clone();
								}
							} else {
								row1._fa_token_sent_on = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 22) {
							row1.details_confirmed_on = null;
						} else {

							if (rs_tMysqlInput_1.getString(22) != null) {
								String dateString_tMysqlInput_1 = rs_tMysqlInput_1
										.getString(22);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_1)) {
									row1.details_confirmed_on = rs_tMysqlInput_1
											.getTimestamp(22);
								} else {
									row1.details_confirmed_on = (java.util.Date) year0_tMysqlInput_1
											.clone();
								}
							} else {
								row1.details_confirmed_on = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 23) {
							row1.first_training_test_done_on = null;
						} else {

							if (rs_tMysqlInput_1.getString(23) != null) {
								String dateString_tMysqlInput_1 = rs_tMysqlInput_1
										.getString(23);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_1)) {
									row1.first_training_test_done_on = rs_tMysqlInput_1
											.getTimestamp(23);
								} else {
									row1.first_training_test_done_on = (java.util.Date) year0_tMysqlInput_1
											.clone();
								}
							} else {
								row1.first_training_test_done_on = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 24) {
							row1.first_live_test_done_on = null;
						} else {

							if (rs_tMysqlInput_1.getString(24) != null) {
								String dateString_tMysqlInput_1 = rs_tMysqlInput_1
										.getString(24);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_1)) {
									row1.first_live_test_done_on = rs_tMysqlInput_1
											.getTimestamp(24);
								} else {
									row1.first_live_test_done_on = (java.util.Date) year0_tMysqlInput_1
											.clone();
								}
							} else {
								row1.first_live_test_done_on = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 25) {
							row1.mot1_details_updated_on = null;
						} else {

							if (rs_tMysqlInput_1.getString(25) != null) {
								String dateString_tMysqlInput_1 = rs_tMysqlInput_1
										.getString(25);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_1)) {
									row1.mot1_details_updated_on = rs_tMysqlInput_1
											.getTimestamp(25);
								} else {
									row1.mot1_details_updated_on = (java.util.Date) year0_tMysqlInput_1
											.clone();
								}
							} else {
								row1.mot1_details_updated_on = null;
							}
						}

//						if (colQtyInRs_tMysqlInput_1 < 26) {
//					//		row1.mot1_legacy_id = null;
//						} else {
//
//							tmpContent_tMysqlInput_1 = rs_tMysqlInput_1
//									.getString(26);
//							if (tmpContent_tMysqlInput_1 != null) {
//						//		row1.mot1_legacy_id = tmpContent_tMysqlInput_1;
//							} else {
//						//		row1.mot1_legacy_id = null;
//							}
//						}

						if (colQtyInRs_tMysqlInput_1 < 26) {
							row1.created_by = 0;
						} else {

							if (rs_tMysqlInput_1.getObject(26) != null) {
								row1.created_by = rs_tMysqlInput_1.getLong(26);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 27) {
							row1.created_on = null;
						} else {

							if (rs_tMysqlInput_1.getString(27) != null) {
								String dateString_tMysqlInput_1 = rs_tMysqlInput_1
										.getString(27);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_1)) {
									row1.created_on = rs_tMysqlInput_1
											.getTimestamp(27);
								} else {
									row1.created_on = (java.util.Date) year0_tMysqlInput_1
											.clone();
								}
							} else {
								row1.created_on = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 28) {
							row1.last_updated_by = null;
						} else {

							if (rs_tMysqlInput_1.getObject(28) != null) {
								row1.last_updated_by = rs_tMysqlInput_1
										.getLong(28);
							} else {
								row1.last_updated_by = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 29) {
							row1.last_updated_on = null;
						} else {

							if (rs_tMysqlInput_1.getString(29) != null) {
								String dateString_tMysqlInput_1 = rs_tMysqlInput_1
										.getString(29);
								if (!("0000-00-00")
										.equals(dateString_tMysqlInput_1)
										&& !("0000-00-00 00:00:00")
												.equals(dateString_tMysqlInput_1)) {
									row1.last_updated_on = rs_tMysqlInput_1
											.getTimestamp(29);
								} else {
									row1.last_updated_on = (java.util.Date) year0_tMysqlInput_1
											.clone();
								}
							} else {
								row1.last_updated_on = null;
							}
						}

						if (colQtyInRs_tMysqlInput_1 < 30) {
							row1.version = 0;
						} else {

							if (rs_tMysqlInput_1.getObject(30) != null) {
								row1.version = rs_tMysqlInput_1.getLong(30);
							} else {

								throw new RuntimeException(
										"Null value in non-Nullable column");
							}
						}

//						if (colQtyInRs_tMysqlInput_1 < 32) {
//					//		row1.batch_number = 0;
//						} else {
//
//							if (rs_tMysqlInput_1.getObject(32) != null) {
//					//			row1.batch_number = rs_tMysqlInput_1
//										.getLong(32);
//							} else {
//
//								throw new RuntimeException(
//										"Null value in non-Nullable column");
//							}
//						}

						/**
						 * [tMysqlInput_1 begin ] stop
						 */
						/**
						 * [tMysqlInput_1 main ] start
						 */

						currentComponent = "tMysqlInput_1";

						tos_count_tMysqlInput_1++;

						/**
						 * [tMysqlInput_1 main ] stop
						 */

						/**
						 * [tMap_1 main ] start
						 */

						currentComponent = "tMap_1";

						boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;

						// ###############################
						// # Input tables (lookups)
						boolean rejectedInnerJoin_tMap_1 = false;
						boolean mainRowRejected_tMap_1 = false;

						// ###############################
						{ // start of Var scope

							// ###############################
							// # Vars tables

							Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
							// ###############################
							// # Output tables

							OpenDJ = null;

							// # Output table : 'OpenDJ'
							OpenDJ_tmp.motUser = null;
							OpenDJ_tmp.oAthCounter = null;
							OpenDJ_tmp.associatedName = null;
							OpenDJ_tmp.audio = null;
							OpenDJ_tmp.businessCategory = null;
							OpenDJ_tmp.carLicense = null;
							OpenDJ_tmp.cn = row1.first_name + " "
									+ row1.family_name;
							OpenDJ_tmp.dc = null;
							OpenDJ_tmp.departmentNumber = null;
							OpenDJ_tmp.description = null;
							OpenDJ_tmp.destinationIndicator = null;
							OpenDJ_tmp.displayName = null;
							OpenDJ_tmp.domain = null;
							OpenDJ_tmp.employeeNumber = null;
							OpenDJ_tmp.employeeType = null;
							OpenDJ_tmp.facsimileTelephoneNumber = null;
							OpenDJ_tmp.givenName = null;
							OpenDJ_tmp.groupOfNames = null;
							OpenDJ_tmp.homePhone = null;
							OpenDJ_tmp.homePostalAddress = null;
							OpenDJ_tmp.initials = null;
							OpenDJ_tmp.internationaliSDNNumber = null;
							OpenDJ_tmp.jpegPhoto = null;
							OpenDJ_tmp.labeledURI = null;
							OpenDJ_tmp.mail = null;
							OpenDJ_tmp.manager = null;
							OpenDJ_tmp.member = null;
							OpenDJ_tmp.mobile = null;
							OpenDJ_tmp.oAthSecret = null;
							OpenDJ_tmp.oAthTokenID = null;
							OpenDJ_tmp.objectClass = "motUser";
							OpenDJ_tmp.ou = "ou=" + context.ldapOU + ","
									+ context.ldapBaseDN;
							OpenDJ_tmp.owner = null;
							OpenDJ_tmp.pager = null;
							OpenDJ_tmp.person = null;
							OpenDJ_tmp.photo = null;
							OpenDJ_tmp.physicalDeliveryOfficeName = null;
							OpenDJ_tmp.postOfficeBox = null;
							OpenDJ_tmp.postalAddress = null;
							OpenDJ_tmp.postalCode = null;
							OpenDJ_tmp.preferredDeliveryMethod = null;
							OpenDJ_tmp.preferredLanguage = null;
							OpenDJ_tmp.registeredAddress = null;
							OpenDJ_tmp.roomNumber = null;
							OpenDJ_tmp.searchGuide = null;
							OpenDJ_tmp.secretary = null;
							OpenDJ_tmp.seeAlso = null;
							OpenDJ_tmp.sn = row1.family_name;
							OpenDJ_tmp.st = null;
							OpenDJ_tmp.street = null;
							OpenDJ_tmp.telephoneNumber = null;
							OpenDJ_tmp.teletexTerminalIdentifier = null;
							OpenDJ_tmp.telexNumber = null;
							OpenDJ_tmp.title = null;
							OpenDJ_tmp.top = null;
							OpenDJ_tmp.uid = "uid=" + row1.username + ",ou="
									+ context.ldapOU;
							OpenDJ_tmp.userCertificate = null;
							OpenDJ_tmp.userPKCS12 = null;
							OpenDJ_tmp.userPassword = context.defaultPassword;
							OpenDJ_tmp.userSMIMECertificate = null;
							OpenDJ_tmp.x121Address = null;
							OpenDJ_tmp.x500UniqueIdentifier = null;
							OpenDJ = OpenDJ_tmp;
							// ###############################

						} // end of Var scope

						rejectedInnerJoin_tMap_1 = false;

						tos_count_tMap_1++;

						/**
						 * [tMap_1 main ] stop
						 */
						// Start of branch "OpenDJ"
						if (OpenDJ != null) {

							/**
							 * [tLDAPOutput_1 main ] start
							 */

							currentComponent = "tLDAPOutput_1";

							javax.naming.directory.Attributes entry_tLDAPOutput_1 = new javax.naming.directory.BasicAttributes(
									true);
							whetherReject_tLDAPOutput_1 = false;
							String dn_tLDAPOutput_1 = String
									.valueOf(OpenDJ.uid).trim();
							if (OpenDJ.motUser != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.motUser);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"motUser");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"motUser", entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.oAthCounter != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.oAthCounter);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"oAthCounter");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"oAthCounter",
												entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.associatedName != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.associatedName);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"associatedName");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"associatedName",
												entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.audio != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.audio);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"audio");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"audio", entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.businessCategory != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.businessCategory);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"businessCategory");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"businessCategory",
												entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.carLicense != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.carLicense);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"carLicense");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"carLicense",
												entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.cn != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.cn);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"cn");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"cn", entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.dc != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.dc);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"dc");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"dc", entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.departmentNumber != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.departmentNumber);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"departmentNumber");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"departmentNumber",
												entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.description != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.description);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"description");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"description",
												entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.destinationIndicator != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.destinationIndicator);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"destinationIndicator");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"destinationIndicator",
												entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.displayName != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.displayName);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"displayName");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"displayName",
												entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.domain != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.domain);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"domain");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"domain", entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.employeeNumber != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.employeeNumber);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"employeeNumber");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"employeeNumber",
												entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.employeeType != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.employeeType);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"employeeType");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"employeeType",
												entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.facsimileTelephoneNumber != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.facsimileTelephoneNumber);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"facsimileTelephoneNumber");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"facsimileTelephoneNumber",
												entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.givenName != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.givenName);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"givenName");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"givenName",
												entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.groupOfNames != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.groupOfNames);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"groupOfNames");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"groupOfNames",
												entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.homePhone != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.homePhone);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"homePhone");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"homePhone",
												entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.homePostalAddress != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.homePostalAddress);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"homePostalAddress");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"homePostalAddress",
												entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.initials != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.initials);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"initials");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"initials",
												entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.internationaliSDNNumber != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.internationaliSDNNumber);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"internationaliSDNNumber");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"internationaliSDNNumber",
												entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.jpegPhoto != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.jpegPhoto);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"jpegPhoto");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"jpegPhoto",
												entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.labeledURI != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.labeledURI);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"labeledURI");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"labeledURI",
												entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.mail != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.mail);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"mail");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"mail", entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.manager != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.manager);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"manager");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"manager", entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.member != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.member);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"member");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"member", entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.mobile != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.mobile);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"mobile");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"mobile", entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.oAthSecret != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.oAthSecret);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"oAthSecret");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"oAthSecret",
												entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.oAthTokenID != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.oAthTokenID);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"oAthTokenID");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"oAthTokenID",
												entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.objectClass != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.objectClass);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"objectClass");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"objectClass",
												entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.ou != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.ou);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"ou");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"ou", entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.owner != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.owner);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"owner");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"owner", entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.pager != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.pager);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"pager");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"pager", entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.person != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.person);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"person");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"person", entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.photo != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.photo);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"photo");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"photo", entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.physicalDeliveryOfficeName != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.physicalDeliveryOfficeName);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"physicalDeliveryOfficeName");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"physicalDeliveryOfficeName",
												entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.postOfficeBox != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.postOfficeBox);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"postOfficeBox");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"postOfficeBox",
												entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.postalAddress != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.postalAddress);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"postalAddress");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"postalAddress",
												entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.postalCode != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.postalCode);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"postalCode");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"postalCode",
												entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.preferredDeliveryMethod != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.preferredDeliveryMethod);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"preferredDeliveryMethod");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"preferredDeliveryMethod",
												entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.preferredLanguage != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.preferredLanguage);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"preferredLanguage");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"preferredLanguage",
												entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.registeredAddress != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.registeredAddress);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"registeredAddress");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"registeredAddress",
												entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.roomNumber != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.roomNumber);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"roomNumber");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"roomNumber",
												entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.searchGuide != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.searchGuide);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"searchGuide");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"searchGuide",
												entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.secretary != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.secretary);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"secretary");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"secretary",
												entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.seeAlso != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.seeAlso);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"seeAlso");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"seeAlso", entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.sn != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.sn);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"sn");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"sn", entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.st != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.st);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"st");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"st", entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.street != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.street);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"street");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"street", entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.telephoneNumber != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.telephoneNumber);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"telephoneNumber");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"telephoneNumber",
												entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.teletexTerminalIdentifier != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.teletexTerminalIdentifier);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"teletexTerminalIdentifier");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"teletexTerminalIdentifier",
												entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.telexNumber != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.telexNumber);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"telexNumber");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"telexNumber",
												entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.title != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.title);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"title");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"title", entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.top != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.top);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"top");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"top", entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.userCertificate != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.userCertificate);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"userCertificate");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"userCertificate",
												entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.userPKCS12 != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.userPKCS12);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"userPKCS12");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"userPKCS12",
												entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.userPassword != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.userPassword);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"userPassword");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"userPassword",
												entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.userSMIMECertificate != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.userSMIMECertificate);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"userSMIMECertificate");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"userSMIMECertificate",
												entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.x121Address != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.x121Address);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"x121Address");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"x121Address",
												entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							if (OpenDJ.x500UniqueIdentifier != null) {
								String incomingColumn_tLDAPOutput_1 = String
										.valueOf(OpenDJ.x500UniqueIdentifier);
								incomingColumn_tLDAPOutput_1 = base64_tLDAPOutput_1
										.filterNullElement(
												incomingColumn_tLDAPOutput_1,
												";");
								if (incomingColumn_tLDAPOutput_1.trim()
										.indexOf(";") > 0) {
									javax.naming.directory.Attribute attr_tLDAPOutput_1 = new javax.naming.directory.BasicAttribute(
											"x500UniqueIdentifier");
									for (String value_tLDAPOutput_1 : incomingColumn_tLDAPOutput_1
											.trim().split(";")) {
										base64_tLDAPOutput_1.addToAttribute(
												false, attr_tLDAPOutput_1,
												value_tLDAPOutput_1);
									}
									entry_tLDAPOutput_1.put(attr_tLDAPOutput_1);
								} else {
									if (incomingColumn_tLDAPOutput_1 != null
											&& !"".equals(incomingColumn_tLDAPOutput_1)) {
										base64_tLDAPOutput_1.checkString(false,
												"x500UniqueIdentifier",
												entry_tLDAPOutput_1,
												incomingColumn_tLDAPOutput_1);
									}
								}
							}
							try {
								boolean found = false;
								try {
									ctx_tLDAPOutput_1
											.getAttributes(dn_tLDAPOutput_1);
									found = true;
								} catch (javax.naming.NameNotFoundException nfEx_tLDAPOutput_1) {
									ctx_tLDAPOutput_1.createSubcontext(
											dn_tLDAPOutput_1,
											entry_tLDAPOutput_1);
									nb_line_tLDAPOutput_1++;
								}
								if (found) {
									ctx_tLDAPOutput_1
											.modifyAttributes(
													dn_tLDAPOutput_1,
													javax.naming.directory.DirContext.REPLACE_ATTRIBUTE,
													entry_tLDAPOutput_1);
									nb_line_tLDAPOutput_1++;
								}
							} catch (java.lang.Exception e) {
								whetherReject_tLDAPOutput_1 = true;
								System.err.print(e.getMessage());
							}
							if (!whetherReject_tLDAPOutput_1) {
							}

							tos_count_tLDAPOutput_1++;

							/**
							 * [tLDAPOutput_1 main ] stop
							 */

						} // End of branch "OpenDJ"

						/**
						 * [tMysqlInput_1 end ] start
						 */

						currentComponent = "tMysqlInput_1";

					}
				} finally {
					if (rs_tMysqlInput_1 != null) {
						rs_tMysqlInput_1.close();
					}
					stmt_tMysqlInput_1.close();

					if (conn_tMysqlInput_1 != null
							&& !conn_tMysqlInput_1.isClosed()) {
						conn_tMysqlInput_1.close();
					}

				}
				globalMap.put("tMysqlInput_1_NB_LINE", nb_line_tMysqlInput_1);

				ok_Hash.put("tMysqlInput_1", true);
				end_Hash.put("tMysqlInput_1", System.currentTimeMillis());

				/**
				 * [tMysqlInput_1 end ] stop
				 */

				/**
				 * [tMap_1 end ] start
				 */

				currentComponent = "tMap_1";

				// ###############################
				// # Lookup hashes releasing
				// ###############################

				ok_Hash.put("tMap_1", true);
				end_Hash.put("tMap_1", System.currentTimeMillis());

				/**
				 * [tMap_1 end ] stop
				 */

				/**
				 * [tLDAPOutput_1 end ] start
				 */

				currentComponent = "tLDAPOutput_1";

				ctx_tLDAPOutput_1.close();
				globalMap.put("tLDAPOutput_1_NB_LINE", nb_line_tLDAPOutput_1);

				ok_Hash.put("tLDAPOutput_1", true);
				end_Hash.put("tLDAPOutput_1", System.currentTimeMillis());

				/**
				 * [tLDAPOutput_1 end ] stop
				 */

			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMysqlInput_1 finally ] start
				 */

				currentComponent = "tMysqlInput_1";

				/**
				 * [tMysqlInput_1 finally ] stop
				 */

				/**
				 * [tMap_1 finally ] start
				 */

				currentComponent = "tMap_1";

				/**
				 * [tMap_1 finally ] stop
				 */

				/**
				 * [tLDAPOutput_1 finally ] start
				 */

				currentComponent = "tLDAPOutput_1";

				/**
				 * [tLDAPOutput_1 finally ] stop
				 */

			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 1);
	}

	public void tMsgBox_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tMsgBox_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tMsgBox_1 begin ] start
				 */

				ok_Hash.put("tMsgBox_1", false);
				start_Hash.put("tMsgBox_1", System.currentTimeMillis());

				currentComponent = "tMsgBox_1";

				int tos_count_tMsgBox_1 = 0;

				/**
				 * [tMsgBox_1 begin ] stop
				 */
				/**
				 * [tMsgBox_1 main ] start
				 */

				currentComponent = "tMsgBox_1";

				int messageIcontMsgBox_1 = javax.swing.JOptionPane.WARNING_MESSAGE;
				String titletMsgBox_1 = "LDAP User Creation";
				String messagetMsgBox_1 = "LDAP User Creation Error Encountered";
				String resulttMsgBox_1 = null;

				javax.swing.JOptionPane.showMessageDialog(null,
						messagetMsgBox_1, titletMsgBox_1, messageIcontMsgBox_1);
				resulttMsgBox_1 = String.valueOf(1);

				globalMap.put("tMsgBox_1_RESULT", resulttMsgBox_1);

				tos_count_tMsgBox_1++;

				/**
				 * [tMsgBox_1 main ] stop
				 */
				/**
				 * [tMsgBox_1 end ] start
				 */

				currentComponent = "tMsgBox_1";

				ok_Hash.put("tMsgBox_1", true);
				end_Hash.put("tMsgBox_1", System.currentTimeMillis());

				/**
				 * [tMsgBox_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tMsgBox_1 finally ] start
				 */

				currentComponent = "tMsgBox_1";

				/**
				 * [tMsgBox_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tMsgBox_1_SUBPROCESS_STATE", 1);
	}

	public void tDie_1Process(final java.util.Map<String, Object> globalMap)
			throws TalendException {
		globalMap.put("tDie_1_SUBPROCESS_STATE", 0);

		final boolean execStat = this.execStat;

		String iterateId = "";

		String currentComponent = "";
		java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

		try {

			String currentMethodName = new java.lang.Exception()
					.getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if (resumeEntryMethodName == null || resumeIt || globalResumeTicket) {// start
																					// the
																					// resume
				globalResumeTicket = true;

				/**
				 * [tDie_1 begin ] start
				 */

				ok_Hash.put("tDie_1", false);
				start_Hash.put("tDie_1", System.currentTimeMillis());

				currentComponent = "tDie_1";

				int tos_count_tDie_1 = 0;

				/**
				 * [tDie_1 begin ] stop
				 */
				/**
				 * [tDie_1 main ] start
				 */

				currentComponent = "tDie_1";

				tLogCatcher_1.addMessage("tDie", "tDie_1", 5,
						"the end is near", 4);
				tLogCatcher_1Process(globalMap);

				globalMap.put("tDie_1_DIE_PRIORITY", 5);
				System.err.println("the end is near");
				globalMap.put("tDie_1_DIE_MESSAGE", "the end is near");
				globalMap.put("tDie_1_DIE_MESSAGES", "the end is near");
				currentComponent = "tDie_1";
				status = "failure";
				errorCode = new Integer(4);
				globalMap.put("tDie_1_DIE_CODE", errorCode);

				if (true) {
					throw new TDieException();
				}

				tos_count_tDie_1++;

				/**
				 * [tDie_1 main ] stop
				 */
				/**
				 * [tDie_1 end ] start
				 */

				currentComponent = "tDie_1";

				ok_Hash.put("tDie_1", true);
				end_Hash.put("tDie_1", System.currentTimeMillis());

				/**
				 * [tDie_1 end ] stop
				 */
			}// end the resume

		} catch (java.lang.Exception e) {

			TalendException te = new TalendException(e, currentComponent,
					globalMap);

			throw te;
		} catch (java.lang.Error error) {

			throw error;
		} finally {

			try {

				/**
				 * [tDie_1 finally ] start
				 */

				currentComponent = "tDie_1";

				/**
				 * [tDie_1 finally ] stop
				 */
			} catch (java.lang.Exception e) {
				// ignore
			} catch (java.lang.Error error) {
				// ignore
			}
			resourceMap = null;
		}

		globalMap.put("tDie_1_SUBPROCESS_STATE", 1);
	}

	public String resuming_logs_dir_path = null;
	public String resuming_checkpoint_path = null;
	public String parent_part_launcher = null;
	private String resumeEntryMethodName = null;
	private boolean globalResumeTicket = false;

	public boolean watch = false;
	// portStats is null, it means don't execute the statistics
	public Integer portStats = null;
	public int portTraces = 4334;
	public String clientHost;
	public String defaultClientHost = "localhost";
	public String contextStr = "Default";
	public boolean isDefaultContext = true;
	public String pid = "0";
	public String rootPid = null;
	public String fatherPid = null;
	public String fatherNode = null;
	public long startTime = 0;
	public boolean isChildJob = false;
	public String log4jLevel = "";

	private boolean execStat = true;

	private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
		protected java.util.Map<String, String> initialValue() {
			java.util.Map<String, String> threadRunResultMap = new java.util.HashMap<String, String>();
			threadRunResultMap.put("errorCode", null);
			threadRunResultMap.put("status", "");
			return threadRunResultMap;
		};
	};

	private java.util.Properties context_param = new java.util.Properties();
	public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

	public String status = "";

	public static void main(String[] args) {
		final userSync userSyncClass = new userSync();

		int exitCode = userSyncClass.runJobInTOS(args);

		System.exit(exitCode);
	}

	public String[][] runJob(String[] args) {

		int exitCode = runJobInTOS(args);
		String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

		return bufferValue;
	}

	public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;

		return hastBufferOutput;
	}

	public int runJobInTOS(String[] args) {
		// reset status
		status = "";

		String lastStr = "";
		for (String arg : args) {
			if (arg.equalsIgnoreCase("--context_param")) {
				lastStr = arg;
			} else if (lastStr.equals("")) {
				evalParam(arg);
			} else {
				evalParam(lastStr + " " + arg);
				lastStr = "";
			}
		}

		if (clientHost == null) {
			clientHost = defaultClientHost;
		}

		if (pid == null || "0".equals(pid)) {
			pid = TalendString.getAsciiRandomString(6);
		}

		if (rootPid == null) {
			rootPid = pid;
		}
		if (fatherPid == null) {
			fatherPid = pid;
		} else {
			isChildJob = true;
		}

		try {
			// call job/subjob with an existing context, like:
			// --context=production. if without this parameter, there will use
			// the default context instead.
			java.io.InputStream inContext = userSync.class.getClassLoader()
					.getResourceAsStream(
							"mot2/usersync_0_2/contexts/" + contextStr
									+ ".properties");
			if (isDefaultContext && inContext == null) {

			} else {
				if (inContext != null) {
					// defaultProps is in order to keep the original context
					// value
					defaultProps.load(inContext);
					inContext.close();
					context = new ContextProperties(defaultProps);
				} else {
					// print info and job continue to run, for case:
					// context_param is not empty.
					System.err.println("Could not find the context "
							+ contextStr);
				}
			}

			if (!context_param.isEmpty()) {
				context.putAll(context_param);
			}
			context.databaseHost = (String) context.getProperty("databaseHost");
			context.databaseName = (String) context.getProperty("databaseName");
			context.databasePassword = (String) context
					.getProperty("databasePassword");
			try {
				context.databasePort = routines.system.ParserUtils
						.parseTo_Integer(context.getProperty("databasePort"));
			} catch (NumberFormatException e) {
				context.databasePort = null;
			}
			context.databaseUserName = (String) context
					.getProperty("databaseUserName");
			context.defaultPassword = (String) context
					.getProperty("defaultPassword");
			context.ldapBaseDN = (String) context.getProperty("ldapBaseDN");
			context.ldapHost = (String) context.getProperty("ldapHost");
			context.ldapOU = (String) context.getProperty("ldapOU");
			context.ldapPassword = (String) context.getProperty("ldapPassword");
			context.ldapPort = (String) context.getProperty("ldapPort");
		} catch (java.io.IOException ie) {
			System.err.println("Could not load context " + contextStr);
			ie.printStackTrace();
		}

		// get context value from parent directly
		if (parentContextMap != null && !parentContextMap.isEmpty()) {
			if (parentContextMap.containsKey("databaseHost")) {
				context.databaseHost = (String) parentContextMap
						.get("databaseHost");
			}
			if (parentContextMap.containsKey("databaseName")) {
				context.databaseName = (String) parentContextMap
						.get("databaseName");
			}
			if (parentContextMap.containsKey("databasePassword")) {
				context.databasePassword = (String) parentContextMap
						.get("databasePassword");
			}
			if (parentContextMap.containsKey("databasePort")) {
				context.databasePort = (Integer) parentContextMap
						.get("databasePort");
			}
			if (parentContextMap.containsKey("databaseUserName")) {
				context.databaseUserName = (String) parentContextMap
						.get("databaseUserName");
			}
			if (parentContextMap.containsKey("defaultPassword")) {
				context.defaultPassword = (String) parentContextMap
						.get("defaultPassword");
			}
			if (parentContextMap.containsKey("ldapBaseDN")) {
				context.ldapBaseDN = (String) parentContextMap
						.get("ldapBaseDN");
			}
			if (parentContextMap.containsKey("ldapHost")) {
				context.ldapHost = (String) parentContextMap.get("ldapHost");
			}
			if (parentContextMap.containsKey("ldapOU")) {
				context.ldapOU = (String) parentContextMap.get("ldapOU");
			}
			if (parentContextMap.containsKey("ldapPassword")) {
				context.ldapPassword = (String) parentContextMap
						.get("ldapPassword");
			}
			if (parentContextMap.containsKey("ldapPort")) {
				context.ldapPort = (String) parentContextMap.get("ldapPort");
			}
		}

		// Resume: init the resumeUtil
		resumeEntryMethodName = ResumeUtil
				.getResumeEntryMethodName(resuming_checkpoint_path);
		resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
		resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName,
				jobName, contextStr, jobVersion);

		// Resume: jobStart
		resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName,
				parent_part_launcher, Thread.currentThread().getId() + "", "",
				"", "", "", resumeUtil.convertToJsonText(context));

		java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
		globalMap.put("concurrentHashMap", concurrentHashMap);

		long startUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		long endUsedMemory = 0;
		long end = 0;

		startTime = System.currentTimeMillis();

		this.globalResumeTicket = true;// to run tPreJob

		this.globalResumeTicket = false;// to run others jobs

		try {
			errorCode = null;
			tMysqlInput_1Process(globalMap);
			if (!"failure".equals(status)) {
				status = "end";
			}
		} catch (TalendException e_tMysqlInput_1) {
			globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", -1);

			e_tMysqlInput_1.printStackTrace();

		}

		this.globalResumeTicket = true;// to run tPostJob

		end = System.currentTimeMillis();

		if (watch) {
			System.out.println((end - startTime) + " milliseconds");
		}

		endUsedMemory = Runtime.getRuntime().totalMemory()
				- Runtime.getRuntime().freeMemory();
		if (false) {
			System.out.println((endUsedMemory - startUsedMemory)
					+ " bytes memory increase when running : userSync");
		}

		int returnCode = 0;
		if (errorCode == null) {
			returnCode = status != null && status.equals("failure") ? 1 : 0;
		} else {
			returnCode = errorCode.intValue();
		}
		resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher,
				Thread.currentThread().getId() + "", "", "" + returnCode, "",
				"", "");

		return returnCode;

	}

	public void destroy() {

	}

	private java.util.Map<String, Object> getSharedConnections4REST() {
		java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
		return connections;
	}

	private void evalParam(String arg) {
		if (arg.startsWith("--resuming_logs_dir_path")) {
			resuming_logs_dir_path = arg.substring(25);
		} else if (arg.startsWith("--resuming_checkpoint_path")) {
			resuming_checkpoint_path = arg.substring(27);
		} else if (arg.startsWith("--parent_part_launcher")) {
			parent_part_launcher = arg.substring(23);
		} else if (arg.startsWith("--watch")) {
			watch = true;
		} else if (arg.startsWith("--stat_port=")) {
			String portStatsStr = arg.substring(12);
			if (portStatsStr != null && !portStatsStr.equals("null")) {
				portStats = Integer.parseInt(portStatsStr);
			}
		} else if (arg.startsWith("--trace_port=")) {
			portTraces = Integer.parseInt(arg.substring(13));
		} else if (arg.startsWith("--client_host=")) {
			clientHost = arg.substring(14);
		} else if (arg.startsWith("--context=")) {
			contextStr = arg.substring(10);
			isDefaultContext = false;
		} else if (arg.startsWith("--father_pid=")) {
			fatherPid = arg.substring(13);
		} else if (arg.startsWith("--root_pid=")) {
			rootPid = arg.substring(11);
		} else if (arg.startsWith("--father_node=")) {
			fatherNode = arg.substring(14);
		} else if (arg.startsWith("--pid=")) {
			pid = arg.substring(6);
		} else if (arg.startsWith("--context_param")) {
			String keyValue = arg.substring(16);
			int index = -1;
			if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
				if (fatherPid == null) {
					context_param.put(keyValue.substring(0, index),
							replaceEscapeChars(keyValue.substring(index + 1)));
				} else { // the subjob won't escape the especial chars
					context_param.put(keyValue.substring(0, index),
							keyValue.substring(index + 1));
				}
			}
		} else if (arg.startsWith("--log4jLevel=")) {
			log4jLevel = arg.substring(13);
		}

	}

	private final String[][] escapeChars = { { "\\\\", "\\" }, { "\\n", "\n" },
			{ "\\'", "\'" }, { "\\r", "\r" }, { "\\f", "\f" }, { "\\b", "\b" },
			{ "\\t", "\t" } };

	private String replaceEscapeChars(String keyValue) {
		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0], currIndex);
				if (index >= 0) {

					result.append(keyValue.substring(currIndex,
							index + strArray[0].length()).replace(strArray[0],
							strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left
			// into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
	}

	public Integer getErrorCode() {
		return errorCode;
	}

	public String getStatus() {
		return status;
	}

	ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 * 175981 characters generated by Talend Open Studio for Data Integration on the
 * April 10, 2015 9:44:24 AM BST
 ************************************************************************************************/
