<?php

namespace DvsaCommon\Enum;

/**
 * Enum class generated from the 'role' table
 *
 * DO NOT EDIT! -- THIS CLASS IS GENERATED BY mot-common-web-module/generate_enums.php
 * @codeCoverageIgnore
 */
class RoleCode
{
    const ASSESSMENT = 'ASSESSMENT';
    const ASSESSMENT_LINE_MANAGER = 'ASSESSMENT-LINE-MANAGER';
    const AUTHORISED_EXAMINER = 'AUTHORISED-EXAMINER';
    const AUTHORISED_EXAMINER_DELEGATE = 'AUTHORISED-EXAMINER-DELEGATE';
    const AUTHORISED_EXAMINER_DESIGNATED_MANAGER = 'AUTHORISED-EXAMINER-DESIGNATED-MANAGER';
    const AUTHORISED_EXAMINER_PRINCIPAL = 'AUTHORISED-EXAMINER-PRINCIPAL';
    const CRON = 'CRON';
    const DEMO_TEST = 'DEMOTEST';
    const AREA_OFFICE_1 = 'DVSA-AREA-OFFICE-1';
    const SCHEME_MANAGER = 'DVSA-SCHEME-MANAGEMENT';
    const SCHEME_USER = 'DVSA-SCHEME-USER';
    const GUEST = 'GUEST';
    const SITE_ADMIN = 'SITE-ADMIN';
    const SITE_MANAGER = 'SITE-MANAGER';
    const SLOT_PURCHASER = 'SLOT-PURCHASER';
    const TESTER = 'TESTER';
    const TESTER_ACTIVE = 'TESTER-ACTIVE';
    const TESTER_APPLICANT_DEMO_TEST_REQUIRED = 'TESTER-APPLICANT-DEMO-TEST-REQUIRED';
    const TESTER_APPLICANT_INITIAL_TRAINING_FAILED = 'TESTER-APPLICANT-INITIAL-TRAINING-FAILED';
    const TESTER_APPLICANT_INITIAL_TRAINING_REQUIRED = 'TESTER-APPLICANT-INITIAL-TRAINING-REQUIR';
    const TESTER_INACTIVE = 'TESTER-INACTIVE';
    const USER = 'USER';
    const VEHICLE_EXAMINER = 'VEHICLE-EXAMINER';
    const CUSTOMER_SERVICE_MANAGER = 'CUSTOMER-SERVICE-MANAGER';
    const CUSTOMER_SERVICE_OPERATIVE = 'CUSTOMER-SERVICE-CENTRE-OPERATIVE';
    const FINANCE = 'FINANCE';
    const DVLA_OPERATIVE = 'DVLA-OPERATIVE';
    const AREA_OFFICE_2 = 'DVSA-AREA-OFFICE-2';
    const TESTER_GVTS = 'GVTS-TESTER';
    const VM_10519_USER = 'VM-10519-USER';
    const DVLA_MANAGER = 'DVLA-MANAGER';
    const VM_10619_USER = 'VM-10619-USER';
    const DVLA_IMPORT = 'DVLA-IMPORT';
    const CENTRAL_ADMIN_TEAM = 'CENTRAL-ADMIN-TEAM';

    /**
     * @return array of values for the type RoleCode
     */
    public static function getAll()
    {
        return [
            self::ASSESSMENT,
            self::ASSESSMENT_LINE_MANAGER,
            self::AUTHORISED_EXAMINER,
            self::AUTHORISED_EXAMINER_DELEGATE,
            self::AUTHORISED_EXAMINER_DESIGNATED_MANAGER,
            self::AUTHORISED_EXAMINER_PRINCIPAL,
            self::CRON,
            self::DEMO_TEST,
            self::AREA_OFFICE_1,
            self::SCHEME_MANAGER,
            self::SCHEME_USER,
            self::GUEST,
            self::SITE_ADMIN,
            self::SITE_MANAGER,
            self::SLOT_PURCHASER,
            self::TESTER,
            self::TESTER_ACTIVE,
            self::TESTER_APPLICANT_DEMO_TEST_REQUIRED,
            self::TESTER_APPLICANT_INITIAL_TRAINING_FAILED,
            self::TESTER_APPLICANT_INITIAL_TRAINING_REQUIRED,
            self::TESTER_INACTIVE,
            self::USER,
            self::VEHICLE_EXAMINER,
            self::CUSTOMER_SERVICE_MANAGER,
            self::CUSTOMER_SERVICE_OPERATIVE,
            self::FINANCE,
            self::DVLA_OPERATIVE,
            self::AREA_OFFICE_2,
            self::TESTER_GVTS,
            self::VM_10519_USER,
            self::DVLA_MANAGER,
            self::VM_10619_USER,
            self::DVLA_IMPORT,
            self::CENTRAL_ADMIN_TEAM,
        ];
    }

    /**
     * @param mixed $key a candidate RoleCode value
     *
     * @return true if $key is in the list of known values for the type
     */
    public static function exists($key)
    {
        return in_array($key, self::getAll(), true);
    }
}
