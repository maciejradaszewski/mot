<?php

/** @var \Dvsa\Mot\ApiClient\Resource\Item\BrakeTestResultClass3AndAbove | \Dvsa\Mot\ApiClient\Resource\Item\BrakeTestResultClass1And2 $brakeResult */
$brakeResult = $this->brakeResult ? $this->brakeResult : false;
if (!$brakeResult) {
    return;
}

if ($this->dataKey === 'serviceBrake1') {
    $brakeData = $brakeResult->getServiceBrake1Data() !== null ? new \Dvsa\Mot\ApiClient\Resource\Item\BrakeTestResultServiceBrakeData($brakeResult->getServiceBrake1Data()) : null;

} elseif ($this->dataKey === 'serviceBrake2') {
    $brakeData = $brakeResult->getServiceBrake2Data() !== null ? new \Dvsa\Mot\ApiClient\Resource\Item\BrakeTestResultServiceBrakeData($brakeResult->getServiceBrake2Data()) : null;
}

if ($this->dataKey !== 'parkingBrake') {
    if (!$brakeData) {
        return;
    }
}

//  --  define type of brakes (service or parking)     --
$brakeType = $this->brakeType;
$isServiceBrake = ($brakeType == BRAKE_TYPE_SERVICE);
$isParkingBrake = ($brakeType == BRAKE_TYPE_PARKING);

//  --  define brake test type (roller, place or other)     --

if ($this->dataKey === 'serviceBrake1') {
    $brakeTestType = $brakeResult->getServiceBrake1TestType();
} elseif ($this->dataKey === 'serviceBrake2') {
    $brakeTestType = $brakeResult->getServiceBrake2TestType();
} elseif ($this->dataKey === 'parkingBrake') {
    $brakeTestType = $brakeResult->getParkingBrakeTestType();
}
$canLock = ($brakeTestType == \DvsaCommon\Enum\BrakeTestTypeCode::ROLLER);

//  --
$body = [];
$isColumnTwoShown = false;

//  --  define data of single wheel --
$isSingleInFront = $brakeResult->getSingleInFront() ? false : $brakeResult->getSingleInFront();
if ($this->dataKey === 'parkingBrake') {
    $effortSingle = $brakeResult->getParkingBrakeEffortSingle();
} else {
    $effortSingle = $brakeData->getEffortSingle();
}

$rowSingle = null;
if ($effortSingle) {
    $rowSingle = $this->partial(
        'partials/mot-test-summary/brake-values-in-kg-result-by-type-row',
        [
            'label1' => 'Single',
            'val1' => $effortSingle,
            'isLock1' => $brakeData->getLockSingle(),
            'canLock' => $canLock,
        ]
    );
}

//  --  draw data of single wheel at front    --
if ($isSingleInFront && $rowSingle) {
    $body[] = $rowSingle;
}

//  --  draw data of other axles    --
for ($i = 1; $i <= 3; ++$i) {
    if ($i === 1) {
        if ($this->dataKey === 'parkingBrake') {
            $effortNearsideAxle = $brakeResult->getParkingBrakeEffortNearside();
            $effortOffsideAxle = $brakeResult->getParkingBrakeEffortOffside();

            $lockNearsideAxle = $brakeResult->getParkingBrakeLockNearside();
            $lockOffsideAxle = $brakeResult->getParkingBrakeLockOffside();
            $imbalanceAxle = $brakeResult->getParkingImbalance();
        } else {
            $effortNearsideAxle = $brakeData->getEffortNearsideAxel1();
            $effortOffsideAxle = $brakeData->getEffortOffsideAxel1();

            $lockNearsideAxle = $brakeData->getLockNearsideAxle1();
            $lockOffsideAxle = $brakeData->getLockOffsideAxle1();
            $imbalanceAxle = $brakeData->getImbalanceAxle1();
        }
    }
    if ($i === 2) {
        if ($this->dataKey === 'parkingBrake') {
            $effortNearsideAxle = $brakeResult->getParkingBrakeEffortSecondaryNearside();
            $effortOffsideAxle = $brakeResult->getParkingBrakeEffortSecondaryOffside();

            $lockNearsideAxle = $brakeResult->getParkingBrakeLockSecondaryNearside();
            $lockOffsideAxle = $brakeResult->getParkingBrakeLockSecondaryNearside();
            $imbalanceAxle = $brakeResult->getParkingBrakeSecondaryImbalance();
        } else {
            $effortNearsideAxle = $brakeData->getEffortNearsideAxel2();
            $effortOffsideAxle = $brakeData->getEffortOffsideAxel2();

            $lockNearsideAxle = $brakeData->getLockNearsideAxle2();
            $lockOffsideAxle = $brakeData->getLockOffsideAxle2();
            $imbalanceAxle = $brakeData->getImbalanceAxle2();
        }
    }
    if($i === 3){
        if($this->dataKey !== 'parkingBrake') {
            $effortNearsideAxle = $brakeData->getEffortNearsideAxel3();
            $effortOffsideAxle = $brakeData->getEffortOffsideAxel3();

            $lockNearsideAxle = $brakeData->getLockNearsideAxle3();
            $lockOffsideAxle = $brakeData->getLockOffsideAxle3();
            $imbalanceAxle = $brakeData->getImbalanceAxle3();
        }
    }

    if (!$effortNearsideAxle) {
        continue;
    }

    $isColumnTwoShown = $isColumnTwoShown || isset($effortOffsideAxle);

    $body[] = $this->partial(
        'partials/mot-test-summary/brake-values-in-kg-result-by-type-row',
        [
            'index' => $i,
            'val1' => $effortNearsideAxle,
            'isLock1' => $lockNearsideAxle,
            'val2' => $effortOffsideAxle,
            'isLock2' => $lockOffsideAxle,
            'imbalance' => $isParkingBrake ? null : intval($imbalanceAxle),
            'canLock' => $canLock,
        ]
    );
}

//  --  draw data of single weel at rear    --
if (!$isSingleInFront && $rowSingle) {
    $body[] = $rowSingle;
}
?>

<?php if (!empty($body)) : ?>
    <div class="row">
        <span class="divider"> </span>

        <div class="col-sm-3">
            <p class="primary-item">
                <?php echo $this->escapeHtml($this->label); ?>
            </p>
        </div>

        <div class="col-sm-9">
            <table style="margin-top: 10px; width: 100%">
                <thead>
                    <tr>
                        <th style="width:20%;">&nbsp;</th>
                        <th style="width:10%;">&nbsp;</th>
                        <th style="width:10%" scope="col">
                            <?php echo $canLock ? 'Lock' : ''; ?>
                        </th>

                        <?php if ($isColumnTwoShown) : ?>
                            <th style="width:20%;">&nbsp;</th>
                            <th style="width:10%;">&nbsp;</th>
                            <th style="width:10%;" scope="col">
                                <?php echo $canLock ? 'Lock' : ''; ?>
                            </th>

                            <th style="width:20%;" scope="col" style="width: 100px">
                                <?php
                                echo $isServiceBrake ? 'Imbalance' : '&nbsp;';
                                ?>
                            </th>
                        <?php else : ?>
                            <th colspan="4" style="width:60%;"></th>
                        <?php endif; ?>
                    </tr>
                </thead>
                <tbody>
                    <?php echo implode('', $body); ?>
                </tbody>
            </table>
        </div>
    </div>
<?php endif; ?>