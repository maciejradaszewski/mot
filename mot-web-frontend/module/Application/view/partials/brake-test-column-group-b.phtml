<?php

use Dvsa\Mot\ApiClient\Resource\Item\BrakeTestResultClass3AndAbove;
use DvsaCommon\Enum\VehicleClassCode;
use DvsaMotTest\ViewModel\DvsaVehicleViewModel;
use Dvsa\Mot\ApiClient\Resource\Item\BrakeTestResultServiceBrakeData;

/* @var DvsaVehicleViewModel $vehicle */
$vehicle;

/* @var BrakeTestResultClass3AndAbove */
$brakeResult;

$vehicleClass = $vehicle->getVehicleClass()->getCode();

if (!in_array($vehicleClass, VehicleClassCode::getGroupBClasses())) {
    throw new RuntimeException(sprintf('Vehicle class "%s" should not use this template', $vehicleClass));
}

if (!$brakeResult instanceof BrakeTestResultClass3AndAbove) {
    throw new RuntimeException(sprintf(
        'This template expects brake result of type "%s", %s given',
        BrakeTestResultClass3AndAbove::class,
        get_class($brakeResult)
    ));
}

$imbalanceData = [];

$hasTwoServiceBrakes = (bool) $brakeResult->getServiceBrake2Efficiency();

$isSingleInFront = $brakeResult->getSingleInFront();

$serviceBrake1Data = is_null($brakeResult->getServiceBrake1Data()) ? null :
    new BrakeTestResultServiceBrakeData($brakeResult->getServiceBrake1Data());

$serviceBrake2Data = is_null($brakeResult->getServiceBrake2Data()) ? null :
    new BrakeTestResultServiceBrakeData($brakeResult->getServiceBrake2Data());

echo '<div class="row service-brake">';

/***********************************************************
 * calculate and render the first column-set "Service brake"
 **********************************************************/
for ($brakeNumber = 1; $brakeNumber <= 2; ++$brakeNumber) {
    $serviceBrakeEfficiency = null;
    $lockPercentValue = null;
    $testPassValue = null;
    //  --  draw service brake result   --
    $key = 'serviceBrake'.$brakeNumber;

    // to be $serviceBrake1Data or $serviceBrake2Data
    $serviceBrakeData = $brakeNumber == 1 ? $serviceBrake1Data : $serviceBrake2Data;
    // to be getServiceBrake1Efficiency or getServiceBrake2Efficiency
    $getServiceBrakeEfficiency = sprintf('getServiceBrake%sEfficiency', $brakeNumber);
    // to be getServiceBrake1EfficiencyPass or getServiceBrake2EfficiencyPass
    $getServiceBrakeEfficiencyPass = sprintf('getServiceBrake%sEfficiencyPass', $brakeNumber);

    $serviceBrakeEfficiency = is_null($brakeResult->$getServiceBrakeEfficiency()) ? null :
        $brakeResult->$getServiceBrakeEfficiency();

    $lockPercentValue = is_null($serviceBrakeData) ? null :
        $serviceBrakeData->getLockPercent();

    $testPassValue = is_null($brakeResult->$getServiceBrakeEfficiencyPass()) ? null :
        $brakeResult->$getServiceBrakeEfficiencyPass();

    if ($serviceBrakeEfficiency !== null) {
        $title = 'Service brake'.($brakeNumber > 1 ? ' '.$brakeNumber : '');

        echo $this->partial(
            'brakeTestResult',
            [
                'title' => $title,
                'idPrefix' => strtolower(str_replace(' ', '-', $title)),
                'columnTitle' => $title.' item',
                'rows' => [
                    [
                        'name' => 'Brake efficiency',
                        'value' => $serviceBrakeEfficiency,
                    ],
                    [
                        'name' => 'Brake lock',
                        'value' => $lockPercentValue,
                    ],
                ],
                'testPass' => $testPassValue,
                'resultText' => 'Service brake test',
            ]
        );
    }

    /***********************************************************
     * calculate the "Imbalance" data
     **********************************************************/
    for ($axleNumber = 1; $axleNumber <= 3; ++$axleNumber) {
        if ($axleNumber === 1) {
            $effortNearsideAxle = is_null($serviceBrakeData) || is_null($serviceBrakeData->getEffortNearsideAxel1()) ?
                null :
                $serviceBrakeData->getEffortNearsideAxel1();
            $imbalanceAxle = is_null($serviceBrakeData) || is_null($serviceBrakeData->getImbalanceAxle1()) ?
                null :
                $serviceBrakeData->getImbalanceAxle1();
        } elseif ($axleNumber === 2) {
            $effortNearsideAxle = is_null($serviceBrakeData) || is_null($serviceBrakeData->getEffortNearsideAxel2()) ?
                null :
                $serviceBrakeData->getEffortNearsideAxel2();
            $imbalanceAxle = is_null($serviceBrakeData) || is_null($serviceBrakeData->getImbalanceAxle2()) ?
                null :
                $serviceBrakeData->getImbalanceAxle2();
        } else {
            $effortNearsideAxle = is_null($serviceBrakeData) || is_null($serviceBrakeData->getEffortNearsideAxel3()) ?
                null :
                $serviceBrakeData->getEffortNearsideAxel3();
            $imbalanceAxle = is_null($serviceBrakeData) || is_null($serviceBrakeData->getImbalanceAxle3()) ?
                null :
                $serviceBrakeData->getImbalanceAxle3();
        }

        $singleInFrontOnAxleOne = $isSingleInFront === true && $axleNumber === 1;
        $notSingleInFrontOnAxleTwo = $isSingleInFront === false && $axleNumber === 2;

        $operatingOnOneWheelAxle = $singleInFrontOnAxleOne || $notSingleInFrontOnAxleTwo;

        if (!empty($effortNearsideAxle) && !$operatingOnOneWheelAxle) {
            $brakeName = $hasTwoServiceBrakes ? 'Brake '.$brakeNumber : '';
            $axelName = trim($brakeName).' Axle '.$axleNumber;

            $imbalanceData[$brakeName.$axleNumber] = [
                'name' => $axelName,
                'value' => $imbalanceAxle,
            ];
        }
    }
}

//  --  imbalance:parking   --
$showParkingBrakeImbalance = $brakeResult->getServiceBrakeIsSingleLine();

$showAxleTwoParkingBrakeImbalance = $showParkingBrakeImbalance
    && !empty($brakeResult->getParkingBrakeSecondaryImbalance());

if ($showParkingBrakeImbalance) {
    $imbalanceData [] = [
        'name' => $showAxleTwoParkingBrakeImbalance ? 'Parking brake axle 1' : 'Parking brake',
        'value' => $brakeResult->getData()->parkingBrakeImbalance,
    ];
}

if ($showAxleTwoParkingBrakeImbalance) {
    $imbalanceData [] = [
        'name' => 'Parking brake axle 2',
        'value' => $brakeResult->getParkingBrakeSecondaryImbalance(),
    ];
}

//  --  imbalance:status   --
$serviceBrake1ImbalancePass = null;
$serviceBrake2ImbalancePass = null;

$parkingBrakeImbalancePass = $brakeResult->getParkingBrakeImbalancePass();

if ($serviceBrake1Data != null) {
    $serviceBrake1ImbalancePass = $serviceBrake1Data->getImbalancePass();
}
if ($serviceBrake2Data != null) {
    $serviceBrake2ImbalancePass = $serviceBrake2Data->getImbalancePass();
}

$isTestPass = (
    $serviceBrake1ImbalancePass === null
    && $serviceBrake2ImbalancePass === null
    && $parkingBrakeImbalancePass === null
) ? null
    : (
        (isset($serviceBrake1ImbalancePass) ? $serviceBrake1ImbalancePass : true)
        && (isset($serviceBrake2ImbalancePass) ? $serviceBrake2ImbalancePass : true)
        && (isset($parkingBrakeImbalancePass) ? $parkingBrakeImbalancePass : true)
    );

echo $this->partial(
    'brakeTestResult', [
        'title' => 'Imbalance',
        'idPrefix' => 'brake-imbalance',
        'columnTitle' => 'Brake imbalance',
        'rows' => $imbalanceData,
        'testPass' => $isTestPass,
        'resultText' => 'Brake imbalance test',
    ]
);

if ($hasTwoServiceBrakes) {
    echo '</div>';
    echo '<div class="row">';
}

echo $this->partial(
    'brakeTestResult', [
        'title' => 'Parking brake',
        'idPrefix' => 'parking-brake',
        'columnTitle' => 'Parking brake item',
        'rows' => [
            [
                'name' => 'Brake efficiency',
                'value' => $brakeResult->getParkingBrakeEfficiency(),
            ],
            [
                'name' => 'Brake lock',
                'value' => $brakeResult->getParkingBrakeLockPercent(),
            ],
        ],
        'testPass' => $brakeResult->getParkingBrakeEfficiencyPass(),
        'resultText' => 'Parking brake test',
    ]
);
echo '</div>';
