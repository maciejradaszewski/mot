<?php

use DvsaCommon\Enum\VehicleClassCode;
use DvsaCommon\Utility\ArrayUtils;

/** @var \DvsaMotTest\Controller\DvsaVehicleViewModel $vehicle */
$vehicle = $this->vehicle;
/** @var \Dvsa\Mot\ApiClient\Resource\Item\BrakeTestResultClass1And2 | \Dvsa\Mot\ApiClient\Resource\Item\BrakeTestResultClass3AndAbove $brakeResult */
$brakeResult = $this->brakeResult;

if (empty($brakeResult)) {
    return;
}

$vehicleClass = $vehicle->getVehicleClass()->getCode();

$vehicleClasses3plus = [VehicleClassCode::CLASS_3, VehicleClassCode::CLASS_4, VehicleClassCode::CLASS_5, VehicleClassCode::CLASS_7];

if(!in_array($vehicleClass, [VehicleClassCode::CLASS_1, VehicleClassCode::CLASS_2])){
    $hasTwoServiceBrakes = !is_null($brakeResult->getServiceBrake2Efficiency()) ? $brakeResult->getServiceBrake2Efficiency() : false;
    $isSingleInFront = !is_null($brakeResult->getSingleInFront()) ? $brakeResult->getSingleInFront() : false;
}

?>

<div class="row">

<?php
$vehicleClass = $vehicle->getVehicleClass()->getCode();

if (in_array($vehicleClass, [VehicleClassCode::CLASS_1, VehicleClassCode::CLASS_2])) :
    for ($brakeNr = 1; $brakeNr <= 2; $brakeNr++) {
        $key = 'control' . $brakeNr;

        $brakeEfficiencyValue = null;
        $lockPercentValue = null;
        $testPassValue = null;

        if($brakeNr === 1){
            $brakeEfficiencyValue = !is_null($brakeResult->getControl1BrakeEfficiency()) ? $brakeResult->getControl1BrakeEfficiency() : null;
            $lockPercentValue = !is_null($brakeResult->getControl1LockPercent()) ? $brakeResult->getControl1LockPercent() : null;
            $testPassValue = !is_null($brakeResult->getControl1EfficiencyPass()) ? $brakeResult->getControl1EfficiencyPass() : null;
        } elseif($brakeNr === 2) {
            $brakeEfficiencyValue = !is_null($brakeResult->getControl2BrakeEfficiency()) ? $brakeResult->getControl2BrakeEfficiency() : null;
            $lockPercentValue = !is_null($brakeResult->getControl2LockPercent()) ? $brakeResult->getControl2LockPercent() : null;
            $testPassValue = !is_null($brakeResult->getControl2BrakeEfficiencyPass()) ? $brakeResult->getControl2BrakeEfficiencyPass() : null;
        }

        echo $this->partial(
            'brakeTestResult',
            [
                'title'       => 'Service brake control ' . $brakeNr,
                'idPrefix'    => 'control-' . $brakeNr,
                'columnTitle' => 'Service brake item',
                'rows'        => [
                    [
                        'name'  => 'Brake efficiency',
                        'value' => $brakeEfficiencyValue,
                    ],
                    [
                        'name'  => 'Brake lock',
                        'value' => $lockPercentValue,
                    ],
                ],
                'testPass'    => $testPassValue,
                'resultText'  => 'Service brake control ' . $brakeNr . ' test',
            ]
        );
    }

elseif (in_array($vehicleClass, $vehicleClasses3plus)) :
    $imbalanceData = [];

    if($brakeResult->getServiceBrake1Data() !== null) {
        /** @var \Dvsa\Mot\ApiClient\Resource\Item\BrakeTestResultServiceBrakeData $serviceBrake1Data */
        $serviceBrake1Data = new \Dvsa\Mot\ApiClient\Resource\Item\BrakeTestResultServiceBrakeData($brakeResult->getServiceBrake1Data());
    }

    if($brakeResult->getServiceBrake2Data() !== null) {
        /** @var \Dvsa\Mot\ApiClient\Resource\Item\BrakeTestResultServiceBrakeData $serviceBrake2Data */
        $serviceBrake2Data = new \Dvsa\Mot\ApiClient\Resource\Item\BrakeTestResultServiceBrakeData($brakeResult->getServiceBrake2Data());
    }

    for ($brakeNr = 1; $brakeNr <= 2; $brakeNr++) {
        $serviceBrakeEfficiency = null;
        $lockPercentValue = null;
        $testPassValue = null;
        //  --  draw service brake result   --
        $key = 'serviceBrake' . $brakeNr;
        if($brakeNr === 1){
            $serviceBrakeEfficiency = !is_null($brakeResult->getServiceBrake1Efficiency()) ? $brakeResult->getServiceBrake1Efficiency() : null;
            $lockPercentValue = !is_null($serviceBrake1Data) ? $serviceBrake1Data->getLockPercent() : null;
            $testPassValue = !is_null($brakeResult->getServiceBrake1EfficiencyPass()) ? $brakeResult->getServiceBrake1EfficiencyPass() : null;
        } elseif($brakeResult->getServiceBrake2Data() != null){
            $serviceBrakeEfficiency = !is_null($brakeResult->getServiceBrake2Efficiency()) ? $brakeResult->getServiceBrake2Efficiency() : null;
            $lockPercentValue = !is_null($serviceBrake2Data) ? $serviceBrake2Data->getLockPercent() : null;
            $testPassValue = !is_null($brakeResult->getServiceBrake2EfficiencyPass()) ? $brakeResult->getServiceBrake2EfficiencyPass() : null;
        }

        if ($serviceBrakeEfficiency !== null) {
            $title = 'Service brake' . ($brakeNr > 1 ? ' ' . $brakeNr : '');

            echo $this->partial(
                'brakeTestResult',
                [
                    'title'       => $title,
                    'idPrefix'    => strtolower(str_replace(' ', '-', $title)),
                    'columnTitle' => $title . ' item',
                    'rows'        => [
                        [
                            'name'  => 'Brake efficiency',
                            'value' => $serviceBrakeEfficiency,
                        ],
                        [
                            'name'  => 'Brake lock',
                            'value' => $lockPercentValue,
                        ],
                    ],
                    'testPass'    => $testPassValue,
                    'resultText'  => 'Service brake test',
                ]
            );
        }

        if ($brakeData !== null) {
            //  --  collect imbalance data  --
            $brakeName = ($hasTwoServiceBrakes ? 'Brake' . ' ' . $brakeNr : '');

            for ($axleNr = 1; $axleNr <= 3; $axleNr++) {
                if($axleNr === 1){
                    $effortNearsideAxle = !is_null($serviceBrake1Data->getEffortNearsideAxel1()) ? $serviceBrake1Data->getEffortNearsideAxel1() : null;
                    $imbalanceAxle = !is_null($serviceBrake1Data->getImbalanceAxle1()) ? $serviceBrake1Data->getImbalanceAxle1(): null;
                } elseif($axleNr === 2) {
                    $effortNearsideAxle = !is_null($serviceBrake1Data->getEffortNearsideAxel2()) ? $serviceBrake1Data->getEffortNearsideAxel2() : null;
                    $imbalanceAxle = !is_null($serviceBrake1Data->getImbalanceAxle2()) ? $serviceBrake1Data->getImbalanceAxle2() : null;
                } else {
                    $effortNearsideAxle = !is_null($serviceBrake1Data->getEffortNearsideAxel3()) ? $serviceBrake1Data->getEffortNearsideAxel3() : null;
                    $imbalanceAxle = !is_null($serviceBrake1Data->getImbalanceAxle3()) ? $serviceBrake1Data->getImbalanceAxle3(): null;
                }
                $isData = $effortNearsideAxle!== null;

                $isOneWheelAxle = ($isSingleInFront === true && $axleNr === 1)
                    || ($isSingleInFront === false && $axleNr === 2);

                if ($isData && !$isOneWheelAxle) {
                    $imbalanceData[] = [
                        'name'  => trim($brakeName . ' ' . 'Axle') . ' ' . $axleNr,
                        'value' => $imbalanceAxle,
                    ];
                }
            }
        }
    }

    //  --  imbalance:parking   --
    $showParkingBrakeImbalance = $brakeResult->getServiceBrakeIsSingleLine();

    $showAxleTwoParkingBrakeImbalance = $showParkingBrakeImbalance
        && !empty($brakeResult->getParkingBrakeSecondaryImbalance());

    if ($showParkingBrakeImbalance) {
        $imbalanceData [] = [
            'name'  => $showAxleTwoParkingBrakeImbalance ? 'Parking brake axle 1' : 'Parking brake',
            'value' => $brakeResult->getParkingBrakeImbalancePass(),
        ];
    }

    if ($showAxleTwoParkingBrakeImbalance) {
        $imbalanceData [] = [
            'name'  => 'Parking brake axle 2',
            'value' => $brakeResult->getParkingBrakeSecondaryImbalance(),
        ];
    }

    //  --  imbalance:status   --
    $serviceBrake1ImbalancePass = null;
    $serviceBrake2ImbalancePass = null;
    if ($showAxleTwoParkingBrakeImbalance) {
        $parkingBrakeImbalancePass = $brakeResult->getParkingBrakeImbalancePass();
    } else {
        $parkingBrakeImbalancePass = null;
    }

    if($serviceBrake1Data != null) {
        $serviceBrake1ImbalancePass = $serviceBrake1Data->getImbalancePass();
    }
    if($serviceBrake2Data != null) {
        $serviceBrake2ImbalancePass = $serviceBrake2Data->getImbalancePass();
    }

    $isTestPass = (
        $serviceBrake1ImbalancePass === null
        && $serviceBrake2ImbalancePass === null
        && $parkingBrakeImbalancePass === null
    ) ? null
      : (
            (isset($serviceBrake1ImbalancePass) ? $serviceBrake1ImbalancePass : true)
            && (isset($serviceBrake2ImbalancePass ) ? $serviceBrake2ImbalancePass : true)
            && (isset($parkingBrakeImbalancePass) ? $parkingBrakeImbalancePass : true)
        );

    echo $this->partial(
        'brakeTestResult', [
            'title'       => 'Imbalance',
            'idPrefix'    => 'brake-imbalance',
            'columnTitle' => 'Brake imbalance',
            'rows'        => $imbalanceData,
            'testPass'    => $isTestPass,
            'resultText'  => 'Brake imbalance test'
        ]
    );

    if ($hasTwoServiceBrakes) :
        ?>
</div>

<div class="row">
        <?php
    endif;

    echo $this->partial(
        'brakeTestResult', [
            'title'       => 'Parking brake',
            'idPrefix'    => 'parking-brake',
            'columnTitle' => 'Parking brake item',
            'rows'        => [
                [
                    'name'  => 'Brake efficiency',
                    'value' => $brakeResult->getParkingBrakeEfficiency(),
                ],
                [
                    'name'  => 'Brake lock',
                    'value' => $brakeResult->getParkingBrakeLockPercent(),
                ]
            ],
            'testPass'    => $brakeResult->getParkingBrakeEfficiencyPass(),
            'resultText'  => 'Parking brake test',
        ]
    );
endif; ?>
</div>
